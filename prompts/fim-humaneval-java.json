[
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Check if in given array list of numbers, are any two numbers closer to each other than\n    // given threshold.\n    // >>> hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))), (0.5f))\n    // (false)\n    // >>> hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.8f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))), (0.3f))\n    // (true)\n    public static boolean hasCloseElements(ArrayList<Float> numbers, float threshold) {\n",
        "body": [
            "        // Sort the list in ascending order",
            "        Collections.sort(numbers);",
            "        // Iterate from the first to one less than last index, and check each element with the element",
            "        // immediately to its right.",
            "        for (int i = 0; i < numbers.size() - 1; i++) {",
            "            // Check if difference between current element and the element to its right is less than",
            "            // the threshold.",
            "            if (numbers.get(i+1) - numbers.get(i) < threshold) {",
            "                return true;",
            "            }",
            "        }",
            "        return false;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in an array array list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)))\n    public static ArrayList<Long> makeAPile(long n) {\n",
        "body": [
            "        ArrayList<Long> levels = new ArrayList<Long>();",
            "        for (long i = 0; i < n; i++) {",
            "            levels.add(n + 2 * i);",
            "        }",
            "        return levels;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array array list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Hi\", (String)\"my\", (String)\"name\", (String)\"is\", (String)\"John\")))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\", (String)\"two\", (String)\"three\", (String)\"four\", (String)\"five\", (String)\"six\")))\n    public static ArrayList<String> wordsString(String s) {\n",
        "body": [
            "        ArrayList<String> al = new ArrayList<String>();",
            "        StringTokenizer st = new StringTokenizer(s, \" , \");",
            "        while (st.hasMoreTokens()) {",
            "            al.add(st.nextToken());",
            "        }",
            "        return al;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // This function takes two positive numbers x and y and returns the\n    // biggest even integer number that is in the range [x, y] inclusive. If \n    // there's no such number, then the function should return -1.\n    // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long x, long y) {\n",
        "body": [
            "        long chosen = -1;",
            "        for (long i = x; i <= y; i++) {",
            "            if (i % 2 == 0) {",
            "                chosen = i;",
            "            }",
            "        }",
            "        return chosen;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given an array array list of positive integers x. return a sorted array list of all \n    // elements that hasn't any even digit.\n    // Note: Returned array list should be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((new ArrayList<Long>(Arrays.asList((long)15l, (long)33l, (long)1422l, (long)1l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)33l)))\n    // >>> uniqueDigits((new ArrayList<Long>(Arrays.asList((long)152l, (long)323l, (long)1422l, (long)10l))))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> uniqueDigits(ArrayList<Long> x) {\n",
        "body": [
            "        ArrayList<Long> b = new ArrayList<Long>();",
            "        for (int i = 0; i < x.size(); i++) {",
            "            if (x.get(i) < 0) {",
            "                x.set(i, x.get(i)*(long)-1);",
            "            }",
            "            boolean unique = true;",
            "            long z = x.get(i);",
            "            while (z > 0) {",
            "                long y = z % 10;",
            "                if (y % 2 == 0) {",
            "                    unique = false;",
            "                    break;",
            "                }",
            "                z = z / 10;",
            "            }",
            "            if (unique) {",
            "                b.add(x.get(i));",
            "            }",
            "        }",
            "        Collections.sort(b);",
            "        return b;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given an array array list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array array list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l, (long)1l, (long)4l, (long)5l, (long)8l, (long)2l, (long)3l))))\n    // (new ArrayList<String>(Arrays.asList((String)\"Eight\", (String)\"Five\", (String)\"Four\", (String)\"Three\", (String)\"Two\", (String)\"Two\", (String)\"One\", (String)\"One\")))\n    // If the array array list is empty, return an empty array array list:\n    // >>> byLength((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<String>(Arrays.asList()))\n    // If the array array list has any strange number ignore it:\n    // >>> byLength((new ArrayList<Long>(Arrays.asList((long)1l, (long)-1l, (long)55l))))\n    // (new ArrayList<String>(Arrays.asList((String)\"One\")))\n    public static ArrayList<String> byLength(ArrayList<Long> arr) {\n",
        "body": [
            "        String[] a = new String[] {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};",
            "        ArrayList<String> res = new ArrayList<String>();",
            "        ArrayList<Long> good = new ArrayList<Long>();",
            "        for (Long i : arr) {",
            "            if (i >= 1 && i <= 9) {",
            "                good.add(i);",
            "            }",
            "        }",
            "        good.sort(new Comparator<Long>() {",
            "            public int compare(Long i1, Long i2) {",
            "                return i1.compareTo(i2);",
            "            }",
            "        });",
            "        Collections.reverse(good);",
            "        for (Long i : good) {",
            "            res.add(a[i.intValue() - 1]);",
            "        }",
            "        return res;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns an array array list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)6l, (long)24l, (long)15l)))\n    public static ArrayList<Long> f(long n) {\n",
        "body": [
            "        ArrayList<Long> ret = new ArrayList<Long>();",
            "        for (long i = 1l; i <= n; i++) {",
            "            long v = 0l;",
            "            if (i % 2 == 0) {",
            "                v = 1l;",
            "                for (long j = 2l; j <= i; j++) {",
            "                    v *= j;",
            "                }",
            "            } else {",
            "                v = (i * (i + 1l)) / 2l;",
            "            }",
            "            ret.add(v);",
            "        }",
            "        return ret;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function count_nums which takes an array array list of integers and returns\n    // the number of elements which has a sum of digits > 0.\n    // If a number is negative, then its first signed digit will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    // >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long> arr) {\n",
        "body": [
            "        long result = 0l;",
            "        for (long i : arr) {",
            "            String str = String.valueOf(i);",
            "            int sum = 0;",
            "            if (str.startsWith(\"-\")) {",
            "                sum = sum - (int) Character.getNumericValue(str.charAt(1));",
            "                for (int j = 2; j < str.length(); j++) {",
            "                    sum = sum + (int) Character.getNumericValue(str.charAt(j));",
            "                }",
            "            } else {",
            "                for (int j = 0; j < str.length(); j++) {",
            "                    sum = sum + (int) Character.getNumericValue(str.charAt(j));",
            "                }",
            "            }",
            "            if (sum > 0) {",
            "                result++;",
            "            }",
            "        }",
            "        return result;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // We have an array array list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    // numbers in the array array list will be randomly ordered. Your task is to determine if\n    // it is possible to get an array array list sorted in non-decreasing order by performing \n    // the following operation on the given array array list:\n    // You are allowed to perform right shift operation any number of times.\n    // One right shift operation means shifting all elements of the array array list by one\n    // position in the right direction. The last element of the array array list will be moved to\n    // the starting position in the array array list i.e. 0th index. \n    // If it is possible to obtain the sorted array array list by performing the above operation\n    // then return true else return false.\n    // If the given array array list is empty then return true.\n    // Note: The given array list is guaranteed to have unique elements.\n    // For Example:\n    // >>> moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)1l, (long)2l))))\n    // (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing order can\n    // be achieved for the given array array list.\n    // >>> moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)4l, (long)1l, (long)2l))))\n    // (false)\n    // Explanation:It is not possible to get non-decreasing order for the given\n    // array array list by performing any number of right shift operations.\n    public static boolean moveOneBall(ArrayList<Long> arr) {\n",
        "body": [
            "        if (arr.size() == 0) return true;",
            "        ArrayList<Long> sorted = new ArrayList<Long>(arr);",
            "        Collections.sort(sorted);",
            "        for (int i = 0; i < arr.size(); i++) {",
            "            ArrayList<Long> copy = new ArrayList<Long>(arr);",
            "            long last = copy.remove(copy.size() - 1);",
            "            copy.add(0, last);",
            "            if (copy.equals(sorted)) return true;",
            "            arr = copy;",
            "        }",
            "        return false;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find the shortest palindrome that begins with a supplied string.\n    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied string that is a palindrome.\n    // - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    public static String makePalindrome(String string) {\n",
        "body": [
            "        StringBuilder newString = new StringBuilder(string);",
            "        String reverse = new StringBuilder(string).reverse().toString();",
            "        for (int index = 0; index < string.length(); index++) {",
            "            if (string.substring(index).equals(reverse.substring(0, string.length() - index))) {",
            "                newString.append(reverse.substring(string.length() - index));",
            "                break;",
            "            }",
            "        }",
            "        return newString.toString();",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // In this problem, you will implement a function that takes two array lists of numbers,\n    // and determines whether it is possible to perform an exchange of elements\n    // between them to make lst1 an array array list of only even numbers.\n    // There is no limit on the number of exchanged elements between lst1 and lst2.\n    // If it is possible to exchange elements between the lst1 and lst2 to make\n    // all the elements of lst1 to be even, return \"YES\".\n    // Otherwise, return \"NO\".\n    // For example:\n    // >>> exchange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (\"YES\")\n    // >>> exchange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)3l, (long)4l))))\n    // (\"NO\")\n    // It is assumed that the input array lists will be non-empty.\n    public static String exchange(ArrayList<Long> lst1, ArrayList<Long> lst2) {\n",
        "body": [
            "        // IMPLEMENT THIS METHOD",
            "        // Feel free to add more methods and variables as needed.",
            "        for (int i = 0; i < lst1.size(); i++) {",
            "            if (lst1.get(i) % 2 == 1) {",
            "                for (int j = 0; j < lst2.size(); j++) {",
            "                    if (lst2.get(j) % 2 == 0) {",
            "                        lst1.set(i, lst2.get(j));",
            "                        lst2.set(j, (long) 1);",
            "                        break;",
            "                    }",
            "                }",
            "            }",
            "        }",
            "        return (lst1.stream().allMatch(x -> x % 2 == 0)) ? \"YES\" : \"NO\";",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string representing a space separated lowercase letters, return a hash map\n    // of the letter with the most repetition and containing the corresponding count.\n    // If several letters have the same occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n    public static HashMap<String,Long> histogram(String test) {\n",
        "body": [
            "        HashMap<String,Long> s = new HashMap<String,Long>();",
            "        if (test.length() > 0) {",
            "            HashMap<String,Long> hm = new HashMap<String,Long>();",
            "            String[] ss = test.split(\" \");",
            "            for (String sss : ss) {",
            "                if (hm.containsKey(sss)) {",
            "                    hm.put(sss, hm.get(sss) + 1);",
            "                } else {",
            "                    hm.put(sss, 1l);",
            "                }",
            "            }",
            "            long max = 0;",
            "            for (String key : hm.keySet()) {",
            "                if (hm.get(key) > max) {",
            "                    max = hm.get(key);",
            "                }",
            "            }",
            "            for (String key : hm.keySet()) {",
            "                if (hm.get(key) == max) {",
            "                    s.put(key, hm.get(key));",
            "                }",
            "            }",
            "        }",
            "        return s;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given an array array list of strings, where each string consists of only digits, return an array array list.\n    // Each element i of the output should be \"the number of odd elements in the\n    // string i of the input.\" where all the i's should be replaced by the number\n    // of odd digits in the i'th string of the input.\n    // >>> oddCount((new ArrayList<String>(Arrays.asList((String)\"1234567\"))))\n    // (new ArrayList<String>(Arrays.asList((String)\"the number of odd elements 4n the str4ng 4 of the 4nput.\")))\n    // >>> oddCount((new ArrayList<String>(Arrays.asList((String)\"3\", (String)\"11111111\"))))\n    // (new ArrayList<String>(Arrays.asList((String)\"the number of odd elements 1n the str1ng 1 of the 1nput.\", (String)\"the number of odd elements 8n the str8ng 8 of the 8nput.\")))\n    public static ArrayList<String> oddCount(ArrayList<String> lst) {\n",
        "body": [
            "        ArrayList<String> res = new ArrayList<String>();",
            "        for (int i = 0; i < lst.size(); i++) {",
            "            int count = 0;",
            "            for (int j = 0; j < lst.get(i).length(); j++) {",
            "                if (Integer.parseInt(lst.get(i).substring(j, j + 1)) % 2 == 1) {",
            "                    count++;",
            "                }",
            "            }",
            "            res.add(\"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"nput.\");",
            "        }",
            "        return res;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given an array array list of integers nums, find the minimum sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n    public static long minSubArraySum(ArrayList<Long> nums) {\n",
        "body": [
            "        long minSum = Long.MAX_VALUE;",
            "        long prevMinSum = Long.MAX_VALUE;",
            "        for (int i = 0; i < nums.size(); i++) {",
            "            long currSum = nums.get(i);",
            "            if (currSum < prevMinSum) {",
            "                prevMinSum = currSum;",
            "            }",
            "            if (currSum < minSum) {",
            "                minSum = currSum;",
            "            }",
            "            for (int j = i + 1; j < nums.size(); j++) {",
            "                currSum += nums.get(j);",
            "                if (currSum < prevMinSum) {",
            "                    prevMinSum = currSum;",
            "                }",
            "                if (currSum < minSum) {",
            "                    minSum = currSum;",
            "                }",
            "            }",
            "        }",
            "        return minSum;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given a rectangular grid of wells. Each row represents a single well,\n    // and each 1 in a row represents a single unit of water.\n    // Each well has a corresponding bucket that can be used to extract water from it, \n    // and all buckets have the same capacity.\n    // Your task is to use the buckets to empty the wells.\n    // Output the number of times you need to lower the buckets.\n    // Example 1:\n    // >>> maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\n    // (6l)\n    // Example 2:\n    // >>> maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\n    // (5l)\n    // Example 3:\n    // >>> maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l))\n    // (0l)\n    // Constraints:\n    // * all wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static long maxFill(ArrayList<ArrayList<Long>> grid, long capacity) {\n",
        "body": [
            "        // Fill in this function",
            "        long count = 0l;",
            "        for (ArrayList<Long> well : grid) {",
            "            long level = 0l;",
            "            for (Long unit : well) {",
            "                if (unit == 1l) {",
            "                    level += 1l;",
            "                }",
            "            }",
            "            long units = level / capacity;",
            "            if (level % capacity != 0l) {",
            "                units += 1l;",
            "            }",
            "            count += units;",
            "        }",
            "        return count;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // In this Kata, you have to sort an array array list of non-negative integers according to\n    // number of ones in their binary representation in ascending order.\n    // For similar number of ones, sort based on decimal value.\n    // It must be implemented like this:\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l, (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n",
        "body": [
            "        Collections.sort(arr, (a, b) -> {",
            "            long a1 = a, b1 = b;",
            "            if (a1 < 0) {",
            "                a1 = -a1;",
            "            }",
            "            if (b1 < 0) {",
            "                b1 = -b1;",
            "            }",
            "            return Long.bitCount(a1) == Long.bitCount(b1) ? Long.compare(a, b) : Integer.compare(Long.bitCount(a1), Long.bitCount(b1));",
            "        });",
            "        return arr;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns an array array list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty array list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n) {\n",
        "body": [
            "        ArrayList<String> ret = new ArrayList<String>();",
            "        String[] words = s.split(\" \");",
            "        for (String word : words) {",
            "            String wordInLowerCase = word.toLowerCase();",
            "            long consonants = 0l;",
            "            for (char c : wordInLowerCase.toCharArray()) {",
            "                switch (c) {",
            "                    case 'a':",
            "                    case 'e':",
            "                    case 'i':",
            "                    case 'o':",
            "                    case 'u':",
            "                        break;",
            "                    default:",
            "                        consonants++;",
            "                        break;",
            "                }",
            "            }",
            "            if (consonants == n) {",
            "                ret.add(word);",
            "            }",
            "        }",
            "        return ret;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given a word. Your task is to find the closest vowel that stands between \n    // two consonants from the right side of the word (case sensitive).\n    // Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    // find any vowel met the above condition. \n    // You may assume that the given string contains English letter only.\n    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n    // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n    public static String getClosestVowel(String word) {\n",
        "body": [
            "        final String vowels = \"aeiou\";",
            "        final String consonants = \"bcdfghjklmnpqrstvwxyz\";",
            "        List<Integer> idx = new ArrayList<>();",
            "        word = word.toLowerCase();",
            "        for (int i = 0; i < word.length(); i++) {",
            "            if (vowels.indexOf(word.charAt(i)) != -1) {",
            "                idx.add(i);",
            "            }",
            "        }",
            "        for (int i = idx.size() - 1; i >= 0; i--) {",
            "            int j = idx.get(i);",
            "            if (j == 0 || j == word.length() - 1) continue;",
            "            char left = word.charAt(j - 1);",
            "            char right = word.charAt(j + 1);",
            "            if (consonants.indexOf(left) != -1 && consonants.indexOf(right) != -1) {",
            "                return String.valueOf(word.charAt(j));",
            "            }",
            "        }",
            "        return \"\";",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given an array array list of two strings, both strings consist of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your job is to check if it is possible to concatenate the two strings in\n    // some order, that the resulting string will be good.\n    // A string S is considered to be good if and only if all parentheses in S\n    // are balanced. For example: the string '(())()' is good, while the string\n    // '())' is not.\n    // Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n    // Examples:\n    // >>> matchParens((new ArrayList<String>(Arrays.asList((String)\"()(\", (String)\")\"))))\n    // (\"Yes\")\n    // >>> matchParens((new ArrayList<String>(Arrays.asList((String)\")\", (String)\")\"))))\n    // (\"No\")\n    public static String matchParens(ArrayList<String> lst) {\n",
        "body": [
            "        String s1 = lst.get(0);",
            "        String s2 = lst.get(1);",
            "        String s3 = s1+s2;",
            "        String s4 = s2+s1;",
            "        int c1 = 0;",
            "        int c2 = 0;",
            "        for (int i = 0; i < s3.length(); i++) {",
            "            if (s3.charAt(i) == '(') c1 += 1;",
            "            else c1 -= 1;",
            "            if (c1 < 0) break;",
            "        }",
            "        for (int i = 0; i < s4.length(); i++) {",
            "            if (s4.charAt(i) == '(') c2 += 1;",
            "            else c2 -= 1;",
            "            if (c2 < 0) break;",
            "        }",
            "        if (c1 == 0 || c2 == 0) return \"Yes\";",
            "        else return \"No\";",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static String stringXor(String a, String b) {\n",
        "body": [
            "        StringBuilder c = new StringBuilder();",
            "        for (int i = 0; i < a.length(); i++) {",
            "            c.append(a.charAt(i) ^ b.charAt(i));",
            "        }",
            "        return c.toString();",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given an array array list arr of integers and a positive integer k, return a sorted array list \n    // of length k with the maximum k numbers in arr.\n    // Example 1:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l))\n    // (new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))\n    // Example 2:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l))\n    // (new ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))\n    // Example 3:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l)))\n    // Note:\n    // 1. The length of the array array list will be in the range of [1, 1000].\n    // 2. The elements in the array array list will be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n",
        "body": [
            "        // Sort array into ascending order",
            "        Collections.sort(arr);",
            "        // Return array",
            "        return new ArrayList<Long>(arr.subList((int)(arr.size() - k), (int)(arr.size())));",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a non-empty array list of integers, return the sum of all of the odd elements that are in even positions.\n    // Examples\n    // >>> solution((new ArrayList<Long>(Arrays.asList((long)5l, (long)8l, (long)7l, (long)1l))))\n    // (12l)\n    // >>> solution((new ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)3l, (long)3l))))\n    // (9l)\n    // >>> solution((new ArrayList<Long>(Arrays.asList((long)30l, (long)13l, (long)24l, (long)321l))))\n    // (0l)\n    public static long solution(ArrayList<Long> lst) {\n",
        "body": [
            "        long sum = 0;",
            "        for (int i = 0; i < lst.size(); i++) {",
            "            if (i % 2 == 0 && lst.get(i) % 2 == 1) {",
            "                sum += lst.get(i);",
            "            }",
            "        }",
            "        return sum;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a non-empty array array list of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // >>> addElements((new ArrayList<Long>(Arrays.asList((long)111l, (long)21l, (long)3l, (long)4000l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l))), (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    public static long addElements(ArrayList<Long> arr, long k) {\n",
        "body": [
            "        return arr.stream().limit(k).filter(x -> x < 100).reduce(0l, (x, y) -> x + y);",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return a sorted array list that has the odd numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    // as follows: start with any positive integer n. Then each term is obtained from the \n    // previous term as follows: if the previous term is even, the next term is one half of \n    // the previous term. If the previous term is odd, the next term is 3 times the previous\n    // term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1) is [1].\n    // 2. returned array list sorted in increasing order.\n    // For example:\n    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)5l)))\n    public static ArrayList<Long> getOddCollatz(long n) {\n",
        "body": [
            "        if (n <= 0) return new ArrayList<Long>();",
            "        HashSet<Long> odds = new HashSet<Long>();",
            "        long n1 = n;",
            "        while (n1 > 1) {",
            "            if (n1 % 2 == 1) odds.add(n1);",
            "            n1 = n1 % 2 == 0 ? n1 / 2 : 3 * n1 + 1;",
            "        }",
            "        odds.add(1l);",
            "        Long[] odds_arr = odds.toArray(new Long[odds.size()]);",
            "        ArrayList<Long> ans = new ArrayList<Long>(Arrays.asList(odds_arr));",
            "        Collections.sort(ans);",
            "        return ans;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static boolean validDate(String date) {\n",
        "body": [
            "        boolean valid_date = false;",
            "        if (date.equals(\"\")) return valid_date;",
            "        String[] parts = date.split(\"-\");",
            "        if (parts.length != 3) return valid_date;",
            "        try {",
            "            int month = Integer.parseInt(parts[0]);",
            "            int day = Integer.parseInt(parts[1]);",
            "            int year = Integer.parseInt(parts[2]);",
            "            if (month < 1 || month > 12) return valid_date;",
            "            if (month == 2) {",
            "                if (day < 1 || day > 29) return valid_date;",
            "            } else if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {",
            "                if (day < 1 || day > 31) return valid_date;",
            "            } else {",
            "                if (day < 1 || day > 30) return valid_date;",
            "            }",
            "            valid_date = true;",
            "        } catch (Exception e) {",
            "            valid_date = false;",
            "        }",
            "        return valid_date;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given an array array list of numbers, return whether or not they are sorted\n    // in ascending order. If array list has more than 1 duplicate of the same\n    // number, return false. Assume no negative numbers and only integers.\n    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean isSorted(ArrayList<Long> lst) {\n",
        "body": [
            "        if (lst.size() == 0) {",
            "            return true;",
            "        }",
            "        else {",
            "            int running_max = 0;",
            "            int previous_number = 0;",
            "            boolean first_time = true;",
            "            boolean seen_2_in_a_row = false;",
            "            for (Long number : lst) {",
            "                if (first_time) {",
            "                    first_time = false;",
            "                    previous_number = number.intValue();",
            "                    running_max = number.intValue();",
            "                }",
            "                else {",
            "                    if (running_max > number.intValue()) {",
            "                        return false;",
            "                    }",
            "                    else {",
            "                        if (previous_number == number.intValue()) {",
            "                            if (seen_2_in_a_row) {",
            "                                return false;",
            "                            }",
            "                            else {",
            "                                seen_2_in_a_row = true;",
            "                            }",
            "                        }",
            "                        else {",
            "                            seen_2_in_a_row = false;",
            "                        }",
            "                        previous_number = number.intValue();",
            "                        running_max = number.intValue();",
            "                    }",
            "                }",
            "            }",
            "            return true;",
            "        }",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n) {\n",
        "body": [
            "        if (n < 10) {",
            "            return n % 2 == 1 ? n : 0;",
            "        }",
            "        return digits(n / 10) * (n % 2 == 1 ? n % 10 : 1);",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given an array array list of numbers.\n    // You need to return the sum of squared numbers in the given array list,\n    // round each element in the array list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n    // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f, (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float> lst) {\n",
        "body": [
            "        if (lst.size() == 0) {",
            "            return 0;",
            "        }",
            "        long sum = 0;",
            "        for (int i = 0; i < lst.size(); i++) {",
            "            sum += (long)Math.ceil(lst.get(i)) * (long)Math.ceil(lst.get(i));",
            "        }",
            "        return sum;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    public static boolean checkIfLastCharIsALetter(String txt) {\n",
        "body": [
            "        if (txt.length() == 0) {",
            "            return false;",
            "        }",
            "        int len = txt.length();",
            "        if (txt.substring(len - 1, len).matches(\"[A-Z]\") || txt.substring(len - 1, len).matches(\"[a-z]\")) {",
            "            if (len == 1) {",
            "                return true;",
            "            }",
            "            if (txt.substring(len - 2, len - 1).matches(\" \")) {",
            "                return true;",
            "            }",
            "        }",
            "        return false;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given array array list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long> arr) {\n",
        "body": [
            "        long p = -1l;",
            "        for (int i = arr.size() - 1; i > 0; i--) {",
            "            if (arr.get(i) < arr.get(i - 1)) {",
            "                p = (long)i;",
            "                break;",
            "            }",
            "        }",
            "        return p;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>> isEqualToSumEven((8l))\n    // (true)\n    public static boolean isEqualToSumEven(long n) {\n",
        "body": [
            "        if (n < 4) {",
            "            return false;",
            "        }",
            "        long d = 2;",
            "        if (n % 2 == 1) {",
            "            d = 1;",
            "        }",
            "        long minX = d;",
            "        long maxX = n / 4;",
            "        while (minX <= maxX) {",
            "            long x = (minX + maxX) / 2;",
            "            long y = n - 2 * x;",
            "            if (y % 2 == 1) {",
            "                y--;",
            "            }",
            "            if (2 * x + y < n) {",
            "                minX = x + 1;",
            "            } else if (2 * x + y > n) {",
            "                maxX = x - 1;",
            "            } else {",
            "                return true;",
            "            }",
            "        }",
            "        return false;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    public static long specialFactorial(long n) {\n",
        "body": [
            "        long result = 1;",
            "        while (n > 0) {",
            "            long local_result = 1;",
            "            long temp = n;",
            "            while (temp > 0) {",
            "                local_result *= temp;",
            "                temp--;",
            "            }",
            "            result *= local_result;",
            "            n--;",
            "        }",
            "        return result;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    public static long greatestCommonDivisor(long a, long b) {\n",
        "body": [
            "        if (a == 0) {",
            "            return b;",
            "        }",
            "        if (b == 0) {",
            "            return a;",
            "        }",
            "        return greatestCommonDivisor(b, a % b);",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    public static String fixSpaces(String text) {\n",
        "body": [
            "        String result = text.replace(\" \", \"_\");",
            "        int i = 0;",
            "        while (i < result.length() - 2) {",
            "            if (result.charAt(i) == '_' && result.charAt(i + 1) == '_' && result.charAt(i + 2) == '_') {",
            "                result = result.substring(0, i) + \"-\" + result.substring(i + 3);",
            "            }",
            "            i++;",
            "        }",
            "        return result;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Create a function which takes a string representing a file's name, and returns\n    // 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    // A file's name is considered to be valid if and only if all the following conditions \n    // are met:\n    // - There should not be more than three digits ('0'-'9') in the file's name.\n    // - The file's name contains exactly one dot '.'\n    // - The substring before the dot should not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    public static String fileNameCheck(String file_name) {\n",
        "body": [
            "        String result = \"No\";",
            "        String[] tokens = file_name.split(\"\\\\.\");",
            "        if (tokens.length != 2) {",
            "            return result;",
            "        }",
            "        String extension = tokens[1];",
            "        if (!(extension.equals(\"txt\") || extension.equals(\"exe\") || extension.equals(\"dll\"))) {",
            "            return result;",
            "        }",
            "        String name = tokens[0];",
            "        int count = 0;",
            "        for (int i = 0; i < name.length(); i++) {",
            "            if (Character.isDigit(name.charAt(i))) {",
            "                count++;",
            "            }",
            "        }",
            "        if (count > 3) {",
            "            return result;",
            "        }",
            "        if (name.length() == 0) {",
            "            return result;",
            "        }",
            "        if (!Character.isLetter(name.charAt(0))) {",
            "            return result;",
            "        }",
            "        return \"Yes\";",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // \"\n    // This function will take an array array list of integers. For all entries in the array list, the function shall square the integer entry if its index is a \n    // multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    // change the entries in the array list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // (long)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))\n    // >>> lst\n    // (long)new ArrayList<Long>(Arrays.asList())\n    // >>> lst\n    // (long)new ArrayList<Long>(Arrays.asList((long)-1l, (long)-5l, (long)2l, (long)-1l, (long)-5l))\n    public static long sumSquares(ArrayList<Long> lst) {\n",
        "body": [
            "        int sz = lst.size();",
            "        for (int i = 0; i < sz; i++) {",
            "            if (i % 3 == 0) {",
            "                lst.set(i, lst.get(i) * lst.get(i));",
            "            } else if (i % 4 == 0) {",
            "                lst.set(i, lst.get(i) * lst.get(i) * lst.get(i));",
            "            }",
            "        }",
            "        long ans = 0;",
            "        for (int i = 0; i < sz; i++) {",
            "            ans += lst.get(i);",
            "        }",
            "        return ans;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static String wordsInSentence(String sentence) {\n",
        "body": [
            "        StringBuilder ans = new StringBuilder();",
            "        String[] words = sentence.split(\" \");",
            "        int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};",
            "        boolean isPrime;",
            "        for (String word : words) {",
            "            isPrime = false;",
            "            for (int prime : primes) {",
            "                if (word.length() == prime) {",
            "                    isPrime = true;",
            "                    break;",
            "                }",
            "            }",
            "            if (isPrime) {",
            "                ans.append(word + \" \");",
            "            }",
            "        }",
            "        if (ans.length() > 0) {",
            "            ans.deleteCharAt(ans.length() - 1);",
            "        }",
            "        return ans.toString();",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to implement a function that will simplify the expression\n    // x * n. The function returns true if x * n evaluates to a whole number and false\n    // otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    // <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n    // You can assume that x, and n are valid fractions, and do not have zero as denominator.\n    // >>> simplify((\"1/5\"), (\"5/1\"))\n    // (true)\n    // >>> simplify((\"1/6\"), (\"2/1\"))\n    // (false)\n    // >>> simplify((\"7/10\"), (\"10/2\"))\n    // (false)\n    public static boolean simplify(String x, String n) {\n",
        "body": [
            "      String[] nums = x.split(\"/\");",
            "      String[] n_nums = n.split(\"/\");",
            "      int x_num = Integer.parseInt(nums[0]);",
            "      int n_num = Integer.parseInt(n_nums[0]);",
            "      int x_denom = Integer.parseInt(nums[1]);",
            "      int n_denom = Integer.parseInt(n_nums[1]);",
            "      int res_num = x_num * n_num;",
            "      int res_denom = x_denom * n_denom;",
            "      return (res_num % res_denom == 0);",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list of numbers as input and returns \n    // the number of elements in the array array list that are greater than 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For example:\n    // >>> specialFilter((new ArrayList<Long>(Arrays.asList((long)15l, (long)-73l, (long)14l, (long)-15l))))\n    // (1l)\n    // >>> specialFilter((new ArrayList<Long>(Arrays.asList((long)33l, (long)-2l, (long)-3l, (long)45l, (long)21l, (long)109l))))\n    // (2l)\n    public static long specialFilter(ArrayList<Long> nums) {\n",
        "body": [
            "        // need to change this function's name, it's a reserved word",
            "        class helper {",
            "            public long getFirstDigit(long n) {",
            "                long[] digits = getDigits(n);",
            "                return digits[0];",
            "            }",
            "            public long getLastDigit(long n) {",
            "                long[] digits = getDigits(n);",
            "                return digits[digits.length - 1];",
            "            }",
            "            public long[] getDigits(long n) {",
            "                ArrayList<Long> digits = new ArrayList<Long>();",
            "                while (n != 0) {",
            "                    digits.add(n % 10);",
            "                    n /= 10;",
            "                }",
            "                Collections.reverse(digits);",
            "                return digits.stream().mapToLong(i -> i).toArray();",
            "            }",
            "        }",
            "        helper h = new helper();",
            "        return nums.stream().filter(x -> x > 10).filter(x -> {",
            "            long firstDigit = h.getFirstDigit(x);",
            "            long lastDigit = h.getLastDigit(x);",
            "            return firstDigit % 2 != 0 && lastDigit % 2 != 0;",
            "        }).count();",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given a positive integer n. You have to create an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n",
        "body": [
            "        // Write your code here",
            "        // To print results to the standard output you can use System.out.println()",
            "        // Example: System.out.println(\"Hello world!\");",
            "        int count = 0;",
            "        ArrayList<Integer> arrayList = new ArrayList<Integer>();",
            "        for (int i = 1; i <= n; i++) {",
            "            arrayList.add(i * i - i + 1);",
            "        }",
            "        for (int i = 0; i < arrayList.size(); i++) {",
            "            for (int j = i + 1; j < arrayList.size(); j++) {",
            "                for (int k = j + 1; k < arrayList.size(); k++) {",
            "                    if ((arrayList.get(i) + arrayList.get(j) + arrayList.get(k)) % 3 == 0) {",
            "                        count++;",
            "                    }",
            "                }",
            "            }",
            "        }",
            "        return count;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n",
        "body": [
            "        ArrayList<String> planets = new ArrayList<String>(Arrays.asList((String)\"Mercury\", (String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\", (String)\"Neptune\"));",
            "        int indexPlanet1 = planets.indexOf(planet1);",
            "        int indexPlanet2 = planets.indexOf(planet2);",
            "        int indexMin = 0;",
            "        int indexMax = 0;",
            "        if (indexPlanet1 >= 0 && indexPlanet2 >= 0) {",
            "            if (indexPlanet1 < indexPlanet2) {",
            "                indexMin = indexPlanet1;",
            "                indexMax = indexPlanet2;",
            "            } else {",
            "                indexMin = indexPlanet2;",
            "                indexMax = indexPlanet1;",
            "            }",
            "            ArrayList<String> planetsInBetween = new ArrayList<String>();",
            "            for (int i = indexMin + 1; i < indexMax; i++) {",
            "                planetsInBetween.add(planets.get(i));",
            "            }",
            "            return planetsInBetween;",
            "        } else {",
            "            return new ArrayList<String>();",
            "        }",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that accepts an array array list of strings as a parameter,\n    // deletes the strings that have odd lengths from it,\n    // and returns the resulted array list with a sorted order,\n    // The array list is always an array array list of strings and never an array array list of numbers,\n    // and it may contain duplicates.\n    // The order of the array list should be ascending by length of each word, and you\n    // should return the array list sorted by that rule.\n    // If two words have the same length, sort the array list alphabetically.\n    // The function should return an array array list of strings in sorted order.\n    // You may assume that all words will have the same length.\n    // For example:\n    // >>> listSort((new ArrayList<String>(Arrays.asList((String)\"aa\", (String)\"a\", (String)\"aaa\"))))\n    // (new ArrayList<String>(Arrays.asList((String)\"aa\")))\n    // >>> listSort((new ArrayList<String>(Arrays.asList((String)\"ab\", (String)\"a\", (String)\"aaa\", (String)\"cd\"))))\n    // (new ArrayList<String>(Arrays.asList((String)\"ab\", (String)\"cd\")))\n    public static ArrayList<String> sortedListSum(ArrayList<String> lst) {\n",
        "body": [
            "        // write your code here, you can assume the size of the list is always not zero.",
            "        ArrayList<String> result = new ArrayList<String>();",
            "        for (String s : lst) {",
            "            if (s.length() % 2 == 0) {",
            "                result.add(s);",
            "            }",
            "        }",
            "        Collections.sort(result, new Comparator<String>() {",
            "            @Override",
            "            public int compare(String s1, String s2) {",
            "                if (s1.length() == s2.length()) {",
            "                    return s1.compareTo(s2);",
            "                }",
            "                return s1.length() - s2.length();",
            "            }",
            "        });",
            "        return result;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return array list of all prefixes from shortest to longest of the input string\n    // >>> allPrefixes((\"abc\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"ab\", (String)\"abc\")))\n    public static ArrayList<String> allPrefixes(String string) {\n",
        "body": [
            "        ArrayList<String> result = new ArrayList<String>();",
            "        for (int i = 0; i < string.length(); i++) {",
            "            result.add(string.substring(0, i + 1));",
            "        }",
            "        return result;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // A simple program which should return the value of x if n is \n    // a prime number and should return the value of y otherwise.\n    // Examples:\n    // >>> xOrY((7l), (34l), (12l))\n    // (34l)\n    // >>> xOrY((15l), (8l), (5l))\n    // (5l)\n    public static long xOrY(long n, long x, long y) {\n",
        "body": [
            "        BigInteger nBig = BigInteger.valueOf(n);",
            "        if (nBig.isProbablePrime(100)) {",
            "            return x;",
            "        } else {",
            "            return y;",
            "        }",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given an array array list of numbers, return the sum of squares of the numbers\n    // in the array list that are odd. Ignore numbers that are negative or not integers.\n    // >>> doubleTheDifference((new ArrayList<Float>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)0l))))\n    // (10l)\n    // >>> doubleTheDifference((new ArrayList<Float>(Arrays.asList((long)-1l, (long)-2l, (long)0l))))\n    // (0l)\n    // >>> doubleTheDifference((new ArrayList<Float>(Arrays.asList((long)9l, (long)-2l))))\n    // (81l)\n    // >>> doubleTheDifference((new ArrayList<Float>(Arrays.asList((long)0l))))\n    // (0l)\n    // If the input array list is empty, return 0.\n    public static long doubleTheDifference(ArrayList<Float> lst) {\n",
        "body": [
            "        return lst.stream().filter(x -> x%2 == 1).mapToLong(Math::round).map(x -> x*x).sum();",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // I think we all remember that feeling when the result of some long-awaited\n    // event is finally known. The feelings and thoughts you have at that moment are\n    // definitely worth noting down and comparing.\n    // Your task is to determine if a person correctly guessed the results of a number of matches.\n    // You are given two array array lists of scores and guesses of equal length, where each index shows a match. \n    // Return an array array list of the same length denoting how far off each guess was. If they have guessed correctly,\n    // the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    // example:\n    // >>> compare((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)1l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)2l, (long)-2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l, (long)3l, (long)3l)))\n    // >>> compare((new ArrayList<Long>(Arrays.asList((long)0l, (long)5l, (long)0l, (long)0l, (long)0l, (long)4l))), (new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l, (long)0l, (long)-2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)4l, (long)4l, (long)1l, (long)0l, (long)0l, (long)6l)))\n    public static ArrayList<Long> compare(ArrayList<Long> game, ArrayList<Long> guess) {\n",
        "body": [
            "        // code here",
            "        ArrayList<Long> result = new ArrayList<Long>();",
            "        for (int i = 0; i < game.size(); i++) {",
            "            if (game.get(i) != guess.get(i)) {",
            "                result.add(Math.abs(game.get(i) - guess.get(i)));",
            "            } else {",
            "                result.add((long)0);",
            "            }",
            "        }",
            "        return result;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given the name of a class (a string) and an array array list of extensions.\n    // The extensions are to be used to load additional classes to the class. The\n    // strength of the extension is as follows: Let CAP be the number of the uppercase\n    // letters in the extension's name, and let SM be the number of lowercase letters \n    // in the extension's name, the strength is given by the fraction CAP - SM. \n    // You should find the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n    // If there are two or more extensions with the same strength, you should\n    // choose the one that comes first in the array list.\n    // For example, if you are given \"Slices\" as the class and an array array list of the\n    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\", (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String class_name, ArrayList<String> extensions) {\n",
        "body": [
            "        // >>> YOUR CODE HERE <<<",
            "        if (extensions.size() == 0) {",
            "            return class_name;",
            "        }",
            "        int strength = Integer.MIN_VALUE;",
            "        String strongest = \"\";",
            "        for (String s : extensions) {",
            "            int cap = (int)s.chars().filter(c -> Character.isUpperCase(c)).count();",
            "            int sm = (int)s.chars().filter(c -> Character.isLowerCase(c)).count();",
            "            int diff = cap - sm;",
            "            if (diff > strength) {",
            "                strength = diff;",
            "                strongest = s;",
            "            }",
            "        }",
            "        return class_name + \".\" + strongest;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    // >>> cycpatternCheck((\"abcd\"), (\"abd\"))\n    // (false)\n    // >>> cycpatternCheck((\"hello\"), (\"ell\"))\n    // (true)\n    // >>> cycpatternCheck((\"whassup\"), (\"psus\"))\n    // (false)\n    // >>> cycpatternCheck((\"abab\"), (\"baa\"))\n    // (true)\n    // >>> cycpatternCheck((\"efef\"), (\"eeff\"))\n    // (false)\n    // >>> cycpatternCheck((\"himenss\"), (\"simen\"))\n    // (true)\n    public static boolean cycpatternCheck(String a, String b) {\n",
        "body": [
            "        int len = b.length();",
            "        boolean found = false;",
            "        for (int i = 0; i < len; i++) {",
            "            b = b.substring(1) + b.charAt(0);",
            "            found = a.contains(b);",
            "            if (found) break;",
            "        }",
            "        return found;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer, obtain its roman numeral equivalent as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <= 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n    // (\"cdxxvi\")\n    public static String intToMiniRoman(long number) {\n",
        "body": [
            "        int num = (int) number;",
            "        String res = \"\";",
            "        if (num == 0)",
            "            return \"\";",
            "        while (num >= 1000) {",
            "            res += \"m\";",
            "            num -= 1000;",
            "        }",
            "        if (num >= 900) {",
            "            res += \"cm\";",
            "            num -= 900;",
            "        }",
            "        if (num >= 500) {",
            "            res += \"d\";",
            "            num -= 500;",
            "        }",
            "        if (num >= 400) {",
            "            res += \"cd\";",
            "            num -= 400;",
            "        }",
            "        while (num >= 100) {",
            "            res += \"c\";",
            "            num -= 100;",
            "        }",
            "        if (num >= 90) {",
            "            res += \"xc\";",
            "            num -= 90;",
            "        }",
            "        if (num >= 50) {",
            "            res += \"l\";",
            "            num -= 50;",
            "        }",
            "        if (num >= 40) {",
            "            res += \"xl\";",
            "            num -= 40;",
            "        }",
            "        while (num >= 10) {",
            "            res += \"x\";",
            "            num -= 10;",
            "        }",
            "        if (num >= 9) {",
            "            res += \"ix\";",
            "            num -= 9;",
            "        }",
            "        if (num >= 5) {",
            "            res += \"v\";",
            "            num -= 5;",
            "        }",
            "        if (num >= 4) {",
            "            res += \"iv\";",
            "            num -= 4;",
            "        }",
            "        while (num >= 1) {",
            "            res += \"i\";",
            "            num -= 1;",
            "        }",
            "        return res;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return true if the three\n    // sides form a right-angled triangle, false otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l), (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    // (false)\n    public static boolean rightAngleTriangle(long a, long b, long c) {\n",
        "body": [
            "        return a*a + b*b == c*c || b*b + c*c == a*a || c*c + a*a == b*b;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that accepts an array array list of strings.\n    // The array list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public static String findMax(ArrayList<String> words) {\n",
        "body": [
            "        Map<String, Integer> wordsToUniqueCharacters = new HashMap<String, Integer>();",
            "        for (String word : words) {",
            "            Set<Character> uniqueCharacters = new HashSet<Character>();",
            "            for (char c : word.toCharArray()) {",
            "                uniqueCharacters.add(c);",
            "            }",
            "            wordsToUniqueCharacters.put(word, uniqueCharacters.size());",
            "        }",
            "        words.sort(new Comparator<String>() {",
            "            @Override",
            "            public int compare(String o1, String o2) {",
            "                int compareResult = wordsToUniqueCharacters.get(o2).compareTo(wordsToUniqueCharacters.get(o1));",
            "                if (compareResult == 0) {",
            "                    return o1.compareTo(o2);",
            "                }",
            "                return compareResult;",
            "            }",
            "        });",
            "        return words.get(0);",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    // but now you need to eat more carrots to complete the day's meals.\n    // you should return an array array list of [ total number of eaten carrots after your meals,\n    // the number of carrots left after your meals ]\n    // if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    // Example:\n    // >>> eat((5l), (6l), (10l))\n    // (new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))\n    // >>> eat((4l), (8l), (9l))\n    // (new ArrayList<Long>(Arrays.asList((long)12l, (long)1l)))\n    // >>> eat((1l), (10l), (10l))\n    // (new ArrayList<Long>(Arrays.asList((long)11l, (long)0l)))\n    // >>> eat((2l), (11l), (5l))\n    // (new ArrayList<Long>(Arrays.asList((long)7l, (long)0l)))\n    // Variables:\n    // @number : integer\n    // the number of carrots that you have eaten.\n    // @need : integer\n    // the number of carrots that you need to eat.\n    // @remaining : integer\n    // the number of remaining carrots thet exist in stock\n    // Constrain:\n    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining <= 1000\n    // Have fun :)\n    public static ArrayList<Long> eat(long number, long need, long remaining) {\n",
        "body": [
            "        long total = number + Math.min(need, remaining);",
            "        long left = Math.max(0, remaining - need);",
            "        return new ArrayList<Long>(Arrays.asList(total, left));",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static String stringSequence(long n) {\n",
        "body": [
            "        String result = \"\";",
            "        for (long i = 0; i <= n; i++) {",
            "            result += i + \" \";",
            "        }",
            "        return result.trim();",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n",
        "body": [
            "        ArrayList<Long> list = new ArrayList<>();",
            "        list.add(operand.get(0));",
            "        for (int i = 0; i < op.size(); i++) {",
            "            if (op.get(i).equals(\"+\"))",
            "                list.add(operand.get(i + 1));",
            "            else if (op.get(i).equals(\"-\"))",
            "                list.add(-operand.get(i + 1));",
            "            else if (op.get(i).equals(\"*\"))",
            "                list.set(list.size() - 1, list.get(list.size() - 1) * operand.get(i + 1));",
            "            else if (op.get(i).equals(\"//\"))",
            "                list.set(list.size() - 1, list.get(list.size() - 1) / operand.get(i + 1));",
            "            else if (op.get(i).equals(\"**\"))",
            "                list.set(list.size() - 1, (long) Math.pow(list.get(list.size() - 1), operand.get(i + 1)));",
            "        }",
            "        return list.stream().mapToLong(x -> x).sum();",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n    // If the string contains no letters, reverse the string.\n    // The function should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>> solve((\"#a@C\"))\n    // (\"#A@c\")\n    public static String solve(String s) {\n",
        "body": [
            "        boolean letterNotFound = true;",
            "        StringBuilder sb = new StringBuilder();",
            "        if (s.length() == 0) return s;",
            "        for (int i = 0; i < s.length(); i++) {",
            "            if (Character.isLetter(s.charAt(i))) {",
            "                letterNotFound = false;",
            "                if (Character.isUpperCase(s.charAt(i))) {",
            "                    sb.append(Character.toLowerCase(s.charAt(i)));",
            "                } else {",
            "                    sb.append(Character.toUpperCase(s.charAt(i)));",
            "                }",
            "            } else {",
            "                sb.append(s.charAt(i));",
            "            }",
            "        }",
            "        if (letterNotFound) {",
            "            return sb.reverse().toString();",
            "        }",
            "        return sb.toString();",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n    public static long countDistinctCharacters(String string) {\n",
        "body": [
            "        long result = 0;",
            "        string = string.toLowerCase();",
            "        Set<Character> set = new HashSet<Character>();",
            "        for (int i = 0; i < string.length(); i++) {",
            "            char c = string.charAt(i);",
            "            set.add(c);",
            "        }",
            "        result = set.size();",
            "        return result;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return array list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)1l, (long)2l, (long)2l, (long)1l, (long)1l, (long)1l, (long)1l, (long)4l, (long)4l)))\n    public static ArrayList<Long> parseMusic(String music_string) {\n",
        "body": [
            "        ArrayList<Long> res = new ArrayList<Long>();",
            "        char[] chars = music_string.toCharArray();",
            "        for (int i = 0; i < chars.length; i++) {",
            "            if (chars[i] == 'o') {",
            "                if (i + 1 < chars.length && chars[i + 1] == '|') {",
            "                    res.add((long)2l);",
            "                    i += 1;",
            "                } else {",
            "                    res.add((long)4l);",
            "                }",
            "            } else if (chars[i] == '.') {",
            "                if (i + 1 < chars.length && chars[i + 1] == '|') {",
            "                    res.add((long)1l);",
            "                    i += 1;",
            "                }",
            "            }",
            "        }",
            "        return res;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long howManyTimes(String string, String substring) {\n",
        "body": [
            "        long count = 0;",
            "        int index = 0;",
            "        while (index != -1) {",
            "            index = string.indexOf(substring, index);",
            "            if (index != -1) {",
            "                index++;",
            "                count++;",
            "            }",
            "        }",
            "        return count;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers) {\n",
        "body": [
            "        String [] nums = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};",
            "        HashMap<String, Integer> indexMap = new HashMap<>();",
            "        for (int i = 0; i < nums.length; i++) {",
            "            indexMap.put(nums[i], i);",
            "        }",
            "        String [] split = numbers.split(\" \");",
            "        Arrays.sort(split, new Comparator<String>() {",
            "            @Override",
            "            public int compare(String s1, String s2) {",
            "                return indexMap.get(s1) - indexMap.get(s2);",
            "            }",
            "        });",
            "        return String.join(\" \", split);",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the array list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"()\", (String)\"(())\", (String)\"(()())\")))\n    public static ArrayList<String> separateParenGroups(String paren_string) {\n",
        "body": [
            "\t\tArrayList<String> output = new ArrayList<String>();",
            "\t\tStringBuffer temp = new StringBuffer();",
            "\t\tint open_paren = 0;",
            "\t\tfor (int i = 0; i < paren_string.length(); i++) {",
            "\t\t\tchar c = paren_string.charAt(i);",
            "\t\t\tif (c == '(') {",
            "\t\t\t\tif (open_paren == 0) {",
            "\t\t\t\t\ttemp = new StringBuffer();",
            "\t\t\t\t}",
            "\t\t\t\topen_paren++;",
            "\t\t\t\ttemp.append(c);",
            "\t\t\t} else if (c == ')') {",
            "\t\t\t\topen_paren--;",
            "\t\t\t\ttemp.append(c);",
            "\t\t\t\tif (open_paren == 0) {",
            "\t\t\t\t\toutput.add(temp.toString());",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t}",
            "\t\treturn output;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of numbers (of at least two elements), apply a linear transform to that array list,\n    // such that the smallest number will become 0 and the largest will become 1\n    // >>> rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f))))\n    // (new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))\n    public static ArrayList<Float> rescaleToUnit(ArrayList<Float> numbers) {\n",
        "body": [
            "        // BEGIN SOLUTION",
            "        float min = numbers.stream().min(Float::compare).get();",
            "        float max = numbers.stream().max(Float::compare).get();",
            "        return numbers.stream().map(e -> (e - min) / (max - min)).collect(Collectors.toCollection(ArrayList::new));",
            "        // END SOLUTION",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Filter given array list of any javathon values only for integers\n    // >>> filterIntegers((new ArrayList<Object>(Arrays.asList((String)\"a\", (String)3.14f, (String)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> filterIntegers((new ArrayList<Object>(Arrays.asList(1l, 2l, 3l, \"abc\", new HashMap<Long,Long>(Map.of()), new ArrayList<Long>(Arrays.asList())))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))\n    public static ArrayList<Long> filterIntegers(ArrayList<Object> values) {\n",
        "body": [
            "        return new ArrayList<Long>(Arrays.asList(values.stream().filter(a -> a instanceof Long).map(a -> (Long)a).toArray(Long[]::new)));",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n    // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    public static long strlen(String string) {\n",
        "body": [
            "        return string.length();",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given number n, find the largest number that divides n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    public static long largestDivisor(long n) {\n",
        "body": [
            "        for (long i = 2; i <= Math.floor(Math.sqrt(n)); i++) {",
            "            if (n % i == 0) {",
            "                return n / i;",
            "            }",
            "        }",
            "        return 1;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return array list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be array listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n",
        "body": [
            "        ArrayList<Long> factors = new ArrayList<Long>();",
            "        for (long d = 2; d*d <= n; d++) {",
            "            while (n % d == 0) {",
            "                factors.add(d);",
            "                n /= d;",
            "            }",
            "        }",
            "        if (n > 1)",
            "            factors.add(n);",
            "        return factors;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From an array array list of integers, remove all elements that occur more than once.\n    // Keep order of elements left the same as in the input.\n    // >>> removeDuplicates((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)4l)))\n    public static ArrayList<Long> removeDuplicates(ArrayList<Long> numbers) {\n",
        "body": [
            "        HashMap<Long, Long> hashmap = new HashMap<Long, Long>();",
            "        for (int i = 0; i < numbers.size(); i++) {",
            "            Long key = numbers.get(i);",
            "            if (hashmap.containsKey(key)) {",
            "                hashmap.put(key, hashmap.get(key) + 1);",
            "            } else {",
            "                hashmap.put(key, 1L);",
            "            }",
            "        }",
            "        ArrayList<Long> out = new ArrayList<Long>();",
            "        for (int i = 0; i < numbers.size(); i++) {",
            "            Long key = numbers.get(i);",
            "            if (hashmap.get(key) == 1) {",
            "                out.add(key);",
            "            }",
            "        }",
            "        return out;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static String flipCase(String string) {\n",
        "body": [
            "        String answer = \"\";",
            "        for (int i = 0; i < string.length(); i++) {",
            "            if (Character.isLowerCase(string.charAt(i))) {",
            "                answer += Character.toUpperCase(string.charAt(i));",
            "            } else {",
            "                answer += Character.toLowerCase(string.charAt(i));",
            "            }",
            "        }",
            "        return answer;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Concatenate array list of strings into a single string\n    // >>> concatenate((new ArrayList<String>(Arrays.asList())))\n    // (\"\")\n    // >>> concatenate((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"b\", (String)\"c\"))))\n    // (\"abc\")\n    public static String concatenate(ArrayList<String> strings) {\n",
        "body": [
            "        return strings.stream().collect(Collectors.joining());",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Filter an input array list of strings only for ones that start with a given prefix.\n    // >>> filterByPrefix((new ArrayList<String>(Arrays.asList())), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterByPrefix((new ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bcd\", (String)\"cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"array\")))\n    public static ArrayList<String> filterByPrefix(ArrayList<String> strings, String prefix) {\n",
        "body": [
            "        return (ArrayList<String>)strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toList());",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive floating point number, it can be decomposed into\n    // and integer part (largest integer smaller than given number) and decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal part of the number.\n    // >>> truncateNumber((3.5f))\n    // (0.5f)\n    public static float truncateNumber(float number) {\n",
        "body": [
            "        return (number - (int)number);",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return only positive numbers in the array list.\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l, (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public static ArrayList<Long> getPositive(ArrayList<Long> l) {\n",
        "body": [
            "        return (new ArrayList<Long>(l.stream().filter(x -> x > 0).collect(Collectors.toList())));",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return true if a given number is prime, and false otherwise.\n    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean isPrime(long n) {\n",
        "body": [
            "        if (n <= 1) return false;",
            "        if (n <= 3) return true;",
            "        if (n % 2 == 0 || n % 3 == 0) return false;",
            "        long i = 5;",
            "        while (i * i <= n) {",
            "            if (n % i == 0 || n % (i + 2) == 0) return false;",
            "            i += 6;",
            "        }",
            "        return true;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // This function takes an array array list l and returns an array array list l' such that\n    // l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    // to the values of the corresponding indicies of l, but sorted.\n    // >>> sortThird((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))\n    // >>> sortThird((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)3l, (long)4l, (long)8l, (long)9l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)3l, (long)4l, (long)8l, (long)9l, (long)5l)))\n    public static ArrayList<Long> sortThird(ArrayList<Long> l) {\n",
        "body": [
            "        ArrayList<Long> l_r = new ArrayList<Long>();",
            "        ArrayList<Long> l_e = new ArrayList<Long>();",
            "        ArrayList<Long> l_s = new ArrayList<Long>();",
            "        for (int i = 0; i < l.size(); i++) {",
            "            if (i % 3 == 0) {",
            "                l_e.add(l.get(i));",
            "            } else {",
            "                l_r.add(l.get(i));",
            "            }",
            "        }",
            "        for (int i = 0; i < l_e.size(); i++) {",
            "            long min = l_e.get(i);",
            "            for (int j = i; j < l_e.size(); j++) {",
            "                if (l_e.get(j) < min) {",
            "                    min = l_e.get(j);",
            "                    l_e.set(j, l_e.get(i));",
            "                    l_e.set(i, min);",
            "                }",
            "            }",
            "        }",
            "        int j = 0;",
            "        for (int i = 0; i < l.size(); i++) {",
            "            if (i % 3 == 0) {",
            "                l_s.add(l_e.get(j));",
            "                j++;",
            "            } else {",
            "                l_s.add(l_r.get(i - j));",
            "            }",
            "        }",
            "        return l_s;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return sorted unique elements in an array array list\n    // >>> unique((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)5l, (long)9l, (long)123l)))\n    public static ArrayList<Long> unique(ArrayList<Long> l) {\n",
        "body": [
            "        TreeSet<Long> tree = new TreeSet<Long>(l);",
            "        return new ArrayList<Long>(tree);",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return maximum element in the array list.\n    // >>> maxElement((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))\n    // (3l)\n    // >>> maxElement((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l))))\n    // (123l)\n    public static long maxElement(ArrayList<Long> l) {\n",
        "body": [
            "        Long max = Long.MIN_VALUE;",
            "        for (int i = 0; i < l.size(); i += 1) {",
            "            if (l.get(i) > max) {",
            "                max = l.get(i);",
            "            }",
            "        }",
            "        return max;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n    public static long fizzBuzz(long n) {\n",
        "body": [
            "        long res = 0;",
            "        for (long i = 0; i < n; i++) {",
            "            if (i % 11 == 0 || i % 13 == 0) {",
            "                String s = String.valueOf(i);",
            "                for (int j = 0; j < s.length(); j++) {",
            "                    if (s.charAt(j) == '7') {",
            "                        res++;",
            "                    }",
            "                }",
            "            }",
            "        }",
            "        return res;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // This function takes an array array list l and returns an array array list l' such that\n    // l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    // to the values of the even indicies of l, but sorted.\n    // >>> sortEven((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))\n    // >>> sortEven((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)5l, (long)4l)))\n    public static ArrayList<Long> sortEven(ArrayList<Long> l) {\n",
        "body": [
            "        // Input: A sequence of real numbers l",
            "        // Output: A sequence of real numbers l' such that",
            "        // l' is identical to l in the odd indicies, while its values at the even indicies are equal",
            "        // to the values of the even indicies of l, but sorted.",
            "        ArrayList<Long> res = new ArrayList<Long>();",
            "        ArrayList<Long> evenIndexed = new ArrayList<Long>();",
            "        int index = 0;",
            "        for (Long num : l) {",
            "            if (index % 2 == 0) {",
            "                evenIndexed.add(num);",
            "            }",
            "            index++;",
            "        }",
            "        Collections.sort(evenIndexed);",
            "        index = 0;",
            "        for (Long num : l) {",
            "            if (index % 2 == 0) {",
            "                res.add(evenIndexed.get(0));",
            "                evenIndexed.remove(0);",
            "            } else {",
            "                res.add(num);",
            "            }",
            "            index++;",
            "        }",
            "        return res;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    // >>> primeFib((1l))\n    // (2l)\n    // >>> primeFib((2l))\n    // (3l)\n    // >>> primeFib((3l))\n    // (5l)\n    // >>> primeFib((4l))\n    // (13l)\n    // >>> primeFib((5l))\n    // (89l)\n    public static long primeFib(long n) {\n",
        "body": [
            "        long fib = 1;",
            "        long prev = 0;",
            "        long count = 0;",
            "        while (count != n) {",
            "            long tmp = fib;",
            "            fib += prev;",
            "            prev = tmp;",
            "            if (BigInteger.valueOf(fib).isProbablePrime(1)) {",
            "                count++;",
            "            }",
            "        }",
            "        return fib;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You're given an array array list of deposit and withdrawal operations on a bank account that starts with\n    // zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    // at that point function should return true. Otherwise it should return false.\n    // >>> belowZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))\n    // (false)\n    // >>> belowZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)-4l, (long)5l))))\n    // (true)\n    public static boolean belowZero(ArrayList<Long> operations) {\n",
        "body": [
            "        long balance = 0;",
            "        for (long op : operations) {",
            "            balance += op;",
            "            if (balance < 0) {",
            "                return true;",
            "            }",
            "        }",
            "        return false;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // triples_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are three distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n",
        "body": [
            "        if (l.size() < 3) {",
            "            return false;",
            "        }",
            "        // copy list l into a new list of longs",
            "        ArrayList<Long> sortedList = new ArrayList<Long>(l);",
            "        // sort the new list of longs using Collections.sort()",
            "        Collections.sort(sortedList);",
            "        for (int i = 0; i < sortedList.size() - 2; i++) {",
            "            int j = i + 1;",
            "            int k = sortedList.size() - 1;",
            "            while (j < k) {",
            "                long currSum = sortedList.get(i) + sortedList.get(j) + sortedList.get(k);",
            "                if (currSum == 0) {",
            "                    return true;",
            "                } else if (currSum < 0) {",
            "                    j++;",
            "                } else {",
            "                    k--;",
            "                }",
            "            }",
            "        }",
            "        return false;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    public static long carRaceCollision(long n) {\n",
        "body": [
            "        // TODO: implement this function",
            "        //return 0;",
            "        BigInteger nBigInteger = BigInteger.valueOf(n);",
            "        BigInteger nSquared = nBigInteger.multiply(nBigInteger);",
            "        return nSquared.longValue();",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return array list with elements incremented by 1.\n    // >>> incrList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)))\n    // >>> incrList((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l, (long)4l, (long)6l, (long)3l, (long)4l, (long)4l, (long)10l, (long)1l, (long)124l)))\n    public static ArrayList<Long> incrList(ArrayList<Long> l) {\n",
        "body": [
            "        for (int i = 0; i < l.size(); i++) {",
            "            l.set(i, l.get(i) + 1l);",
            "        }",
            "        return l;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes an array array list of integers as an input.\n    // it returns true if there are two distinct elements in the array list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n    // (false)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))\n    // (true)\n    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    // (false)\n    public static boolean pairsSumToZero(ArrayList<Long> l) {\n",
        "body": [
            "        for (int i = 0; i < l.size(); i++) {",
            "            for (int j = i + 1; j < l.size(); j++) {",
            "                if (l.get(i) + l.get(j) == 0) {",
            "                    return true;",
            "                }",
            "            }",
            "        }",
            "        return false;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Change numerical base of input number x to base.\n    // return string representation after the conversion.\n    // base numbers are less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\")\n    public static String changeBase(long x, long base) {\n",
        "body": [
            "        // Fill this in.",
            "        if (x<0 || base<2 || base>9) {",
            "            throw new IllegalArgumentException(\"bad input\");",
            "        }",
            "        if (x==0) {",
            "            return \"0\";",
            "        }",
            "        StringBuilder sb = new StringBuilder();",
            "        while (x>0) {",
            "            sb.append(x%base);",
            "            x = x/base;",
            "        }",
            "        return sb.reverse().toString();",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given length of a side and high return area for a triangle.\n    // >>> triangleArea((5l), (3l))\n    // (7.5f)\n    public static float triangleArea(long a, long h) {\n",
        "body": [
            "        return (a*h)/2f;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n",
        "body": [
            "        // REPLACE WITH YOUR CODE",
            "        if (n == 0) return 0;",
            "        if (n == 1) return 0;",
            "        if (n == 2) return 2;",
            "        if (n == 3) return 0;",
            "        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return median of elements in the array list l.\n    // >>> median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (float)3l\n    // >>> median((new ArrayList<Long>(Arrays.asList((long)-10l, (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l))))\n    // (15.0f)\n    public static float median(ArrayList<Long> l) {\n",
        "body": [
            "        float ret = 0;",
            "        Collections.sort(l);",
            "        int size = l.size();",
            "        if (size % 2 == 0) {",
            "            ret = (l.get(size / 2) + l.get(size / 2 - 1)) / 2f;",
            "        } else {",
            "            ret = l.get(size / 2);",
            "        }",
            "        return ret;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Checks if given string is a palindrome\n    // >>> isPalindrome((\"\"))\n    // (true)\n    // >>> isPalindrome((\"aba\"))\n    // (true)\n    // >>> isPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> isPalindrome((\"zbcd\"))\n    // (false)\n    public static boolean isPalindrome(String text) {\n",
        "body": [
            "        boolean isPalindrome = true;",
            "        int left = 0;",
            "        int right = text.length() - 1;",
            "        while (left < right) {",
            "            if (text.charAt(left) != text.charAt(right)) {",
            "                isPalindrome = false;",
            "                break;",
            "            }",
            "            left++;",
            "            right--;",
            "        }",
            "        return isPalindrome;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long modp(long n, long p) {\n",
        "body": [
            "        // Base case.",
            "        if (n == 0) return 1;",
            "        // Recursion.",
            "        long sqrt = modp(n / 2, p);",
            "        sqrt = (sqrt * sqrt) % p;",
            "        // Even case.",
            "        if (n % 2 == 0) {",
            "            return sqrt;",
            "        }",
            "        // Odd case.",
            "        return (sqrt * 2) % p;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given array list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f))))\n    // (1.0f)\n    public static float meanAbsoluteDeviation(ArrayList<Float> numbers) {\n",
        "body": [
            "        float mean = (float)numbers.stream().mapToDouble(Float::floatValue).average().getAsDouble();",
            "        return (float)numbers.stream().mapToDouble(n -> Math.abs(n - mean)).average().getAsDouble();",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static String removeVowels(String text) {\n",
        "body": [
            "        String vowels = \"aeiouAEIOU\";",
            "        String newText = \"\";",
            "        for (int i = 0; i < text.length(); i++) {",
            "            if (vowels.indexOf(text.charAt(i)) == -1) {",
            "                newText += text.charAt(i);",
            "            }",
            "        }",
            "        return newText;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return true if all numbers in the array list l are below threshold t.\n    // >>> belowThreshold((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))), (100l))\n    // (true)\n    // >>> belowThreshold((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))), (5l))\n    // (false)\n    public static boolean belowThreshold(ArrayList<Long> l, long t) {\n",
        "body": [
            "        Long[] a = l.toArray(new Long[l.size()]);",
            "        for (int i = 0; i < a.length; i++) {",
            "            if (a[i] >= t) {",
            "                return false;",
            "            }",
            "        }",
            "        return true;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n    // >>> add((5l), (7l))\n    // (12l)\n    public static long add(long x, long y) {\n",
        "body": [
            "        return x + y;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static boolean sameChars(String s0, String s1) {\n",
        "body": [
            "        return s0.chars().distinct().sorted().boxed().collect(Collectors.toList()).equals(s1.chars().distinct().sorted().boxed().collect(Collectors.toList()));",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    public static long fib(long n) {\n",
        "body": [
            "        if (n == 0) {",
            "            return 0l;",
            "        }",
            "        else if (n == 1) {",
            "            return 1l;",
            "        }",
            "        else {",
            "            return Problem.fib((n - 1)) + Problem.fib((n - 2));",
            "        }",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean correctBracketing(String brackets) {\n",
        "body": [
            "        int open = 0;",
            "        for (int i = 0; i < brackets.length(); i++) {",
            "            char c = brackets.charAt(i);",
            "            if (c == '<') {",
            "                open++;",
            "            } else {",
            "                open--;",
            "            }",
            "            if (open < 0) {",
            "                return false;",
            "            }",
            "        }",
            "        return open == 0;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return true is array list elements are monotonically increasing or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean monotonic(ArrayList<Long> l) {\n",
        "body": [
            "        long a = l.get(0);",
            "        boolean inc = true;",
            "        boolean dec = true;",
            "        for (int i = 1; i < l.size(); i++) {",
            "            if (l.get(i) < a) {",
            "                inc = false;",
            "            }",
            "            if (l.get(i) > a) {",
            "                dec = false;",
            "            }",
            "            a = l.get(i);",
            "        }",
            "        return inc || dec;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return sorted unique common elements for two array lists.\n    // >>> common((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)3l, (long)34l, (long)653l, (long)2l, (long)5l))), (new ArrayList<Long>(Arrays.asList((long)5l, (long)7l, (long)1l, (long)5l, (long)9l, (long)653l, (long)121l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)653l)))\n    // >>> common((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)8l))), (new ArrayList<Long>(Arrays.asList((long)3l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l)))\n    public static ArrayList<Long> common(ArrayList<Long> l1, ArrayList<Long> l2) {\n",
        "body": [
            "        return new ArrayList<Long>(",
            "            l1.stream()",
            "                .filter(l2::contains)",
            "                .collect(Collectors.toSet())",
            "        );",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n    // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long n) {\n",
        "body": [
            "        List<Long> primes = new ArrayList<>();",
            "        long x = n;",
            "        for (long i = 2; i * i <= x; i++) {",
            "            if (x % i == 0) {",
            "                primes.add(i);",
            "                x /= i;",
            "                i--;",
            "            }",
            "        }",
            "        if (x > 1) {",
            "            primes.add(x);",
            "        }",
            "        return primes.get(primes.size() - 1);",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Insert a number 'delimeter' between every two consecutive elements of input array list `numbers'\n    // >>> intersperse((new ArrayList<Long>(Arrays.asList())), (4l))\n    // (new ArrayList<Long>(Arrays.asList()))\n    // >>> intersperse((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))), (4l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)4l, (long)3l)))\n    public static ArrayList<Long> intersperse(ArrayList<Long> numbers, long delimeter) {\n",
        "body": [
            "        ArrayList<Long> result = new ArrayList<Long>();",
            "        for (int i = 0; i < (numbers.size()); i++) {",
            "            result.add(numbers.get(i));",
            "            if ((i < (numbers.size() - 1))) {",
            "                result.add(delimeter);",
            "            }",
            "        }",
            "        return result;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // sum_to_n is a function that sums numbers from 1 to n.\n    // >>> sumToN((30l))\n    // (465l)\n    // >>> sumToN((100l))\n    // (5050l)\n    // >>> sumToN((5l))\n    // (15l)\n    // >>> sumToN((10l))\n    // (55l)\n    // >>> sumToN((1l))\n    // (1l)\n    public static long sumToN(long n) {\n",
        "body": [
            "        return (n * (n + 1)) / 2;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean correctBracketing(String brackets) {\n",
        "body": [
            "        int balance = 0;",
            "        for (int i = 0; i < brackets.length(); i++) {",
            "            if (brackets.charAt(i) == '(') {",
            "                balance++;",
            "            } else {",
            "                balance--;",
            "            }",
            "            if (balance < 0) {",
            "                return false;",
            "            }",
            "        }",
            "        return balance == 0;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs) {\n",
        "body": [
            "        ArrayList<Long> ans = new ArrayList<Long>();",
            "        for (int i = 1; i < xs.size(); i++) {",
            "            ans.add(xs.get(i) * i);",
            "        }",
            "        return ans;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n    public static long fibfib(long n) {\n",
        "body": [
            "        if (n == 0) {",
            "            return 0;",
            "        }",
            "        if (n == 1) {",
            "            return 0;",
            "        }",
            "        if (n == 2) {",
            "            return 1;",
            "        }",
            "        long[] memo = new long[(int) n + 1];",
            "        memo[0] = 0;",
            "        memo[1] = 0;",
            "        memo[2] = 1;",
            "        for (int i = 3; i <= n; i++) {",
            "            memo[i] = memo[i - 1] + memo[i - 2] + memo[i - 3];",
            "        }",
            "        return memo[(int) n];",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function vowels_count which takes a string representing\n    // a word as input and returns the number of vowels in the string.\n    // Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    // vowel, but only when it is at the end of the given word.\n    // Example:\n    // >>> vowelsCount((\"abcde\"))\n    // (2l)\n    // >>> vowelsCount((\"ACEDY\"))\n    // (3l)\n    public static long vowelsCount(String s) {\n",
        "body": [
            "        long sum = 0;",
            "        String sUpper = s.toUpperCase();",
            "        int lastIndex = sUpper.length() - 1;",
            "        for (int i = 0; i < sUpper.length(); i++) {",
            "            if (sUpper.charAt(i) == 'A' || sUpper.charAt(i) == 'E' || sUpper.charAt(i) == 'I' || sUpper.charAt(i) == 'O' || sUpper.charAt(i) == 'U') {",
            "                sum++;",
            "            }",
            "            if (sUpper.charAt(i) == 'Y' && i == lastIndex) {",
            "                sum++;",
            "            }",
            "        }",
            "        return sum;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    public static String circularShift(long x, long shift) {\n",
        "body": [
            "        String digits = String.valueOf(x);",
            "        if (shift > digits.length()) {",
            "            return new StringBuilder(digits).reverse().toString();",
            "        }",
            "        return (digits.substring(digits.length() - (int)shift, digits.length()) + digits.substring(0, digits.length() - (int)shift));",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Task\n    // Write a function that takes a string as input and returns the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n    // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    public static long digitSum(String s) {\n",
        "body": [
            "        return s.chars().filter(i -> i >= 65 && i <= 90).sum();",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // In this task, you will be given a string that represents a number of apples and oranges \n    // that are distributed in a basket of fruit this basket contains \n    // apples, oranges, and mango fruits. Given the string that represents the total number of \n    // the oranges and apples and an integer that represent the total number of the fruits \n    // in the basket return the number of the mango fruits in the basket.\n    // for examble:\n    // >>> fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    // >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n    // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    // (19l)\n    public static long fruitDistribution(String s, long n) {\n",
        "body": [
            "        String[] splitted = s.split(\" \");",
            "        long apples = Long.parseLong(splitted[0]);",
            "        long oranges = Long.parseLong(splitted[3]);",
            "        return n - apples - oranges;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // \"Given an array array list representing a branch of a tree that has non-negative integer nodes\n    // your task is to pluck one of the nodes and return it.\n    // The plucked node should be the node with the smallest even value.\n    // If multiple nodes with the same smallest even value are found return the node that has smallest index.\n    // The plucked node should be returned in an array array list, [ smalest_value, its index ],\n    // If there are no even values or the given array array list is empty, return [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n    // so we will choose the first zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n",
        "body": [
            "        int minIndex = -1;",
            "        long minValue = -1;",
            "        for (int i = 0; i < arr.size(); i++) {",
            "            if (arr.get(i) % 2 == 0) {",
            "                if (minIndex == -1 || arr.get(i) < minValue) {",
            "                    minIndex = i;",
            "                    minValue = arr.get(i);",
            "                }",
            "            }",
            "        }",
            "        ArrayList<Long> newArr = new ArrayList<Long>();",
            "        if (minIndex == -1) {",
            "            return newArr;",
            "        }",
            "        newArr.add(minValue);",
            "        newArr.add((long)minIndex);",
            "        return newArr;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given a non-empty array list of positive integers. Return the greatest integer that is greater than \n    // zero, and has a frequency greater than or equal to the value of the integer itself. \n    // The frequency of an integer is the number of times it appears in the array list.\n    // If no such a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l, (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst) {\n",
        "body": [
            "        HashMap<Long, Long> map = new HashMap<Long, Long>();",
            "        Long max = (long)-1;",
            "        for (int i = 0; i < lst.size(); i++) {",
            "            long val = lst.get(i);",
            "            if (map.containsKey(val)) {",
            "                map.put(val, map.get(val) + 1);",
            "            } else {",
            "                map.put(val, (long)1);",
            "            }",
            "            if (map.get(val) >= val && val > max) {",
            "                max = val;",
            "            }",
            "        }",
            "        return max;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"(()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String paren_string) {\n",
        "body": [
            "        ArrayList<Long> result = new ArrayList<Long>();",
            "        String[] paren_strings = paren_string.split(\" \");",
            "        for (String paren : paren_strings) {",
            "            long max_depth = 0;",
            "            long current_depth = 0;",
            "            for (char c : paren.toCharArray()) {",
            "                if (c == '(') {",
            "                    current_depth += 1;",
            "                    max_depth = Math.max(max_depth, current_depth);",
            "                } else if (c == ')') {",
            "                    current_depth -= 1;",
            "                }",
            "            }",
            "            result.add(max_depth);",
            "        }",
            "        return result;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given array list of integers, return array list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {\n",
        "body": [
            "        // BEGIN SOLUTION",
            "        if (lst.size() <= 1) {",
            "            return lst;",
            "        }",
            "        ArrayList<Long> result = new ArrayList<Long>();",
            "        ArrayList<Long> sorted = new ArrayList<Long>(lst);",
            "        Collections.sort(sorted);",
            "        int min = 0;",
            "        int max = sorted.size() - 1;",
            "        while (min <= max) {",
            "            result.add(sorted.get(min));",
            "            min++;",
            "            if (min <= max) {",
            "                result.add(sorted.get(max));",
            "                max--;",
            "            }",
            "        }",
            "        return result;",
            "        // END SOLUTION",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // (float)-1l\n    public static float triangleArea(long a, long b, long c) {\n",
        "body": [
            "        // if triangle is valid, Heron's formula.",
            "        // formula has sqrt so use float or double",
            "        if(a + b > c && a + c > b && b + c > a) {",
            "            float s = (a + b + c) / 2.0f;",
            "            float area = (float)Math.sqrt(s * (s - a) * (s - b) * (s - c));",
            "            // round the area to two decimal points",
            "            return (float)Math.round(area * 100) / 100;",
            "        }",
            "        return -1;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic array list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l))), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)3l))), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)3l))), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l))), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    public static boolean willItFly(ArrayList<Long> q, long w) {\n",
        "body": [
            "        if (q.size() == 0) {",
            "            return false;",
            "        }",
            "        if (q.size() == 1) {",
            "            return true;",
            "        }",
            "        // add all elements",
            "        Long sum = 0l;",
            "        for (int i = 0; i < q.size(); i++) {",
            "            sum += q.get(i);",
            "        }",
            "        if (sum > w) {",
            "            return false;",
            "        }",
            "        // check if the object is balanced",
            "        for (int i = 0; i < q.size() / 2; i++) {",
            "            if (q.get(i) != q.get(q.size() - 1 - i)) {",
            "                return false;",
            "            }",
            "        }",
            "        return true;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given an array array list arr of integers, find the minimum number of elements that\n    // need to be changed to make the array array list palindromic. A palindromic array array list is an array array list that\n    // is read the same backwards and forwards. In one change, you can change one element to any other element.\n    // For example:\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l))))\n    // (4l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l))))\n    // (1l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long smallestChange(ArrayList<Long> arr) {\n",
        "body": [
            "        // Write your code here",
            "        // To print results to the standard output you can use System.out.println()",
            "        // Example: System.out.println(\"Hello world!\");",
            "        int first = 0;",
            "        int last = arr.size() - 1;",
            "        int count = 0;",
            "        while (first < last) {",
            "            if (arr.get(first) != arr.get(last)) {",
            "                count++;",
            "            }",
            "            first++;",
            "            last--;",
            "        }",
            "        return count;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that accepts two array lists of strings and returns the array list that has \n    // total number of chars in the all strings of the array list less than the other array list.\n    // if the two array lists have the same number of chars, return the first array list.\n    // Examples\n    // >>> totalMatch((new ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList())))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\", (String)\"Hi\"))))\n    // (new ArrayList<String>(Arrays.asList((String)\"hI\", (String)\"Hi\")))\n    // >>> totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"hi\", (String)\"admin\", (String)\"project\"))))\n    // (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"admin\")))\n    // >>> totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\", (String)\"hi\", (String)\"hi\"))))\n    // (new ArrayList<String>(Arrays.asList((String)\"hI\", (String)\"hi\", (String)\"hi\")))\n    // >>> totalMatch((new ArrayList<String>(Arrays.asList((String)\"4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"3\", (String)\"4\", (String)\"5\"))))\n    // (new ArrayList<String>(Arrays.asList((String)\"4\")))\n    public static ArrayList<String> totalMatch(ArrayList<String> lst1, ArrayList<String> lst2) {\n",
        "body": [
            "        int sum1 = 0;",
            "        int sum2 = 0;",
            "        for (String s : lst1) {",
            "            sum1 += s.length();",
            "        }",
            "        for (String s : lst2) {",
            "            sum2 += s.length();",
            "        }",
            "        if (sum1 <= sum2) {",
            "            return lst1;",
            "        } else {",
            "            return lst2;",
            "        }",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long a) {\n",
        "body": [
            "        if (a == 1) {",
            "            return false;",
            "        }",
            "        if (a == 2) {",
            "            return true;",
            "        }",
            "        long copyOfInput = a;",
            "        ArrayList<Long> arr = new ArrayList<Long>();",
            "        while (a % 2 == 0) {",
            "            arr.add(2l);",
            "            a /= 2;",
            "        }",
            "        for (long i = 3; i <= Math.sqrt(a); i += 2) {",
            "            while (a % i == 0) {",
            "                arr.add(i);",
            "                a /= i;",
            "            }",
            "        }",
            "        if (a > 2) {",
            "            arr.add(a);",
            "        }",
            "        return arr.size() == 3;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    public static boolean iscube(long a) {\n",
        "body": [
            "        return a==0l||(a>0l&&Math.pow(Math.round(Math.pow(a, 1.0/3.0)), 3)==a)||(a<0l&&Math.pow(Math.round(Math.pow(-a, 1.0/3.0)), 3)==-a);",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    public static long hexKey(String num) {\n",
        "body": [
            "      long result = 0;",
            "      for (int i = 0; i < num.length(); i++) {",
            "        if (num.charAt(i) == '2' || num.charAt(i) == '3' || num.charAt(i) == '5' || num.charAt(i) == '7' || num.charAt(i) == 'B' || num.charAt(i) == 'D') {",
            "          result++;",
            "        }",
            "      }",
            "      return result;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a number in decimal form and your task is to convert it to\n    // binary format. The function should return a string, with each character representing a binary\n    // number. Each character in the string will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    // The extra characters are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\")\n    public static String decimalToBinary(long decimal) {\n",
        "body": [
            "        return \"db\" + Long.toBinaryString(decimal) + \"db\";",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Filter an input array list of strings only for ones that contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String> filterBySubstring(ArrayList<String> strings, String substring) {\n",
        "body": [
            "        return new ArrayList<String>(strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList()));",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you an array array list of GPAs for some students and you have to write \n    // a function that can output an array array list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    // >>> gradeEquation((new ArrayList<Float>(Arrays.asList((float)4.0f, (float)3l, (float)1.7f, (float)2l, (float)3.5f))))\n    // (new ArrayList<String>(Arrays.asList((String)\"A+\", (String)\"B\", (String)\"C-\", (String)\"C\", (String)\"A-\")))\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float> grades) {\n",
        "body": [
            "        ArrayList<String> letterGrades = new ArrayList<String>();",
            "        for (int i = 0; i < grades.size(); i++) {",
            "            float currentGrade = grades.get(i);",
            "            if (currentGrade == 4.0f) {",
            "                letterGrades.add(\"A+\");",
            "            } else if (currentGrade > 3.7f) {",
            "                letterGrades.add(\"A\");",
            "            } else if (currentGrade > 3.3f) {",
            "                letterGrades.add(\"A-\");",
            "            } else if (currentGrade > 3.0f) {",
            "                letterGrades.add(\"B+\");",
            "            } else if (currentGrade > 2.7f) {",
            "                letterGrades.add(\"B\");",
            "            } else if (currentGrade > 2.3f) {",
            "                letterGrades.add(\"B-\");",
            "            } else if (currentGrade > 2.0f) {",
            "                letterGrades.add(\"C+\");",
            "            } else if (currentGrade > 1.7f) {",
            "                letterGrades.add(\"C\");",
            "            } else if (currentGrade > 1.3f) {",
            "                letterGrades.add(\"C-\");",
            "            } else if (currentGrade > 1.0f) {",
            "                letterGrades.add(\"D+\");",
            "            } else if (currentGrade > 0.7f) {",
            "                letterGrades.add(\"D\");",
            "            } else if (currentGrade > 0.0f) {",
            "                letterGrades.add(\"D-\");",
            "            } else {",
            "                letterGrades.add(\"E\");",
            "            }",
            "        }",
            "        return letterGrades;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a string and returns true if the string\n    // length is a prime number or false otherwise\n    // Examples\n    // >>> primeLength((\"Hello\"))\n    // (true)\n    // >>> primeLength((\"abcdcba\"))\n    // (true)\n    // >>> primeLength((\"kittens\"))\n    // (true)\n    // >>> primeLength((\"orange\"))\n    // (false)\n    public static boolean primeLength(String string) {\n",
        "body": [
            "        return new java.math.BigInteger(String.valueOf(string.length())).isProbablePrime(100);",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the count of the numbers of n-digit\n    // positive integers that start or end with 1.\n    public static long startsOneEnds(long n) {\n",
        "body": [
            "        long lower = (long) Math.pow(10, n - 1);",
            "        long upper = (long) Math.pow(10, n) - 1;",
            "        long count = 0;",
            "        for (long i = lower; i <= upper; i++) {",
            "            String s = \"\" + i;",
            "            if (s.startsWith(\"1\") || s.endsWith(\"1\"))",
            "                count++;",
            "        }",
            "        return count;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a non-empty array list of integers lst. add the even elements that are at odd indices..\n    // Examples:\n    // >>> add((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)6l, (long)7l))))\n    // (2l)\n    public static long add(ArrayList<Long> lst) {\n",
        "body": [
            "        long sum = 0;",
            "        for (int i = 0; i < lst.size(); i++) {",
            "            if (i % 2 == 1 && lst.get(i) % 2 == 0) {",
            "                sum += lst.get(i);",
            "            }",
            "        }",
            "        return sum;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a string and returns an ordered version of it.\n    // Ordered version of string, is a string where all words (separated by space)\n    // are replaced by a new word where all the characters arranged in\n    // ascending order based on ascii value.\n    // Note: You should keep the order of words and blank spaces in the sentence.\n    // For example:\n    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n    // (\"Hello !!!Wdlor\")\n    public static String antiShuffle(String s) {\n",
        "body": [
            "        StringBuilder sb = new StringBuilder();",
            "        String[] words = s.split(\" \");",
            "        for (String word : words) {",
            "            char[] chars = word.toCharArray();",
            "            Arrays.sort(chars);",
            "            sb.append(new String(chars));",
            "            sb.append(\" \");",
            "        }",
            "        sb.deleteCharAt(sb.length() - 1);",
            "        return sb.toString();",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given an array array list of non-negative integers, return a cojava of the given array array list after sorting,\n    // you will sort the given array array list in ascending order if the sum( first index value, last index value) is odd,\n    // or sort it in descending order if the sum( first index value, last index value) is even.\n    // Note:\n    // * don't change the given array array list.\n    // Examples:\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l, (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static ArrayList<Long> sortArray(ArrayList<Long> array) {\n",
        "body": [
            "        if(array.size()==0) {",
            "            return array;",
            "        }",
            "        if(array.size()==1) {",
            "            return array;",
            "        }",
            "        if(array.size()>1) {",
            "            if((array.get(0)+array.get(array.size()-1))%2==0) {",
            "                Collections.sort(array, Collections.reverseOrder());",
            "            }",
            "            else {",
            "                Collections.sort(array);",
            "            }",
            "        }",
            "        return array;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    public static String encrypt(String s) {\n",
        "body": [
            "        StringBuffer b = new StringBuffer();",
            "        for (char c : s.toCharArray()) {",
            "            b.append((char)((c+4) > 'z' ? (((c+4)%'z')+'a'-1) : c+4));",
            "        }",
            "        return b.toString();",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public static long isBored(String S) {\n",
        "body": [
            "        // ...",
            "        long boredoms = 0;",
            "        // Split the string into sentences first",
            "        String[] sentences = S.split(\"\\\\.\\\\s|\\\\?\\\\s|\\\\!\\\\s\");",
            "        //System.out.println(Arrays.toString(sentences));",
            "        for (String sentence : sentences) {",
            "            //System.out.println(sentence);",
            "            // For each sentence, split them into words",
            "            String[] words = sentence.split(\"\\\\s\");",
            "            if (words.length > 0 && words[0].equals(\"I\")) {",
            "                boredoms++;",
            "            }",
            "        }",
            "        return boredoms;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String message) {\n",
        "body": [
            "        char[] arr = message.toCharArray();",
            "        char[] vowels = \"AEIOUaeiou\".toCharArray();",
            "        for (int i = 0; i < arr.length; i++) {",
            "            if (Arrays.binarySearch(vowels, arr[i]) > -1) {",
            "                arr[i] = (char) (arr[i] + 2);",
            "            }",
            "            if (Character.isUpperCase(arr[i])) {",
            "                arr[i] = Character.toLowerCase(arr[i]);",
            "            } else {",
            "                arr[i] = Character.toUpperCase(arr[i]);",
            "            }",
            "        }",
            "        return new String(arr);",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given an array array list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((new ArrayList<Long>(Arrays.asList((long)0l, (long)3l, (long)2l, (long)1l, (long)3l, (long)5l, (long)7l, (long)4l, (long)5l, (long)5l, (long)5l, (long)2l, (long)181l, (long)32l, (long)4l, (long)32l, (long)3l, (long)2l, (long)32l, (long)324l, (long)4l, (long)3l))))\n    // (10l)\n    // >>> skjkasdkd((new ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)1l, (long)8l, (long)2l, (long)4597l, (long)2l, (long)1l, (long)3l, (long)40l, (long)1l, (long)2l, (long)1l, (long)2l, (long)4l, (long)2l, (long)5l, (long)1l))))\n    // (25l)\n    // >>> skjkasdkd((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)1l, (long)32l, (long)5107l, (long)34l, (long)83278l, (long)109l, (long)163l, (long)23l, (long)2323l, (long)32l, (long)30l, (long)1l, (long)9l, (long)3l))))\n    // (13l)\n    // >>> skjkasdkd((new ArrayList<Long>(Arrays.asList((long)0l, (long)724l, (long)32l, (long)71l, (long)99l, (long)32l, (long)6l, (long)0l, (long)5l, (long)91l, (long)83l, (long)0l, (long)5l, (long)6l))))\n    // (11l)\n    // >>> skjkasdkd((new ArrayList<Long>(Arrays.asList((long)0l, (long)81l, (long)12l, (long)3l, (long)1l, (long)21l))))\n    // (3l)\n    // >>> skjkasdkd((new ArrayList<Long>(Arrays.asList((long)0l, (long)8l, (long)1l, (long)2l, (long)1l, (long)7l))))\n    // (7l)\n    public static long skjkasdkd(ArrayList<Long> lst) {\n",
        "body": [
            "        long largestPrime = 0l;",
            "        for (Long item : lst) {",
            "            long number = item;",
            "            int counter = 0;",
            "            if (item == 1) {",
            "                continue;",
            "            }",
            "            if (item == 2) {",
            "                counter = 1;",
            "            }",
            "            else {",
            "                int l = 1;",
            "                while (l <= (int) number) {",
            "                    if (number % l == 0) {",
            "                        counter++;",
            "                    }",
            "                    l++;",
            "                }",
            "            }",
            "            if (counter == 2) {",
            "                if (number > largestPrime) {",
            "                    largestPrime = number;",
            "                }",
            "            }",
            "        }",
            "        if (largestPrime == 0) {",
            "            return 0l;",
            "        }",
            "        else {",
            "            long output = 0l;",
            "            while (largestPrime > 0) {",
            "                output += largestPrime % 10;",
            "                largestPrime /= 10;",
            "            }",
            "            return output;",
            "        }",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a hash map, return true if all keys are strings in lower \n    // case or all keys are strings in upper case, else return false.\n    // The function should return false is the given hash map is empty.\n    // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n    // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict) {\n",
        "body": [
            "        if (dict.isEmpty()) {",
            "            return false;",
            "        }",
            "        boolean allLowerCase = dict.keySet().stream().allMatch(k -> k.matches(\"^[a-z]+$\"));",
            "        boolean allUpperCase = dict.keySet().stream().allMatch(k -> k.matches(\"^[A-Z]+$\"));",
            "        return allLowerCase || allUpperCase;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement a function that takes an non-negative integer and returns an array array list of the first n\n    // integers that are prime numbers and less than n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l)))\n    // >>> countUpTo((11l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)7l)))\n    // >>> countUpTo((0l))\n    // (new ArrayList<Long>(Arrays.asList()))\n    // >>> countUpTo((20l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)7l, (long)11l, (long)13l, (long)17l, (long)19l)))\n    // >>> countUpTo((1l))\n    // (new ArrayList<Long>(Arrays.asList()))\n    // >>> countUpTo((18l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)7l, (long)11l, (long)13l, (long)17l)))\n    public static ArrayList<Long> countUpTo(long n) {\n",
        "body": [
            "        ArrayList<Long> arrayList = new ArrayList<Long>();",
            "        for (long i = 2l; i < n; i++) {",
            "            boolean isPrime = true;",
            "            for (long j = 2l; j < i; j++) {",
            "                if (i % j == 0) {",
            "                    isPrime = false;",
            "                    break;",
            "                }",
            "            }",
            "            if (isPrime) {",
            "                arrayList.add(i);",
            "            }",
            "        }",
            "        return arrayList;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    public static long multiply(long a, long b) {\n",
        "body": [
            "        //throw new UnsupportedOperationException(\"Method not implemented yet.\");",
            "        //Do your magic here",
            "        long x = Math.abs(a % 10);",
            "        long y = Math.abs(b % 10);",
            "        return x * y;",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s, count the number of uppercase vowels in even indices.\n    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    // >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"))\n    // (0l)\n    public static long countUpper(String s) {\n",
        "body": [
            "        return (long) IntStream.range(0, s.length())",
            "                .filter(i -> i % 2 == 0)",
            "                .filter(i -> s.charAt(i) == 'A' || s.charAt(i) == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' || s.charAt(i) == 'U')",
            "                .count();",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long closestInteger(String value) {\n",
        "body": [
            "        // >>> your code here <<<",
            "        BigDecimal bd = new BigDecimal(value);",
            "        bd = bd.setScale(0, BigDecimal.ROUND_HALF_UP);",
            "        return bd.longValue();",
            "    }",
            "}"
        ]
    },
    {
        "language": "java",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a given array list of integers, generate an array array list of rolling maximum element found until given moment\n    // in the sequence.\n    // >>> rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n",
        "body": [
            "        // Add your implementation here",
            "        ArrayList<Long> results = new ArrayList<Long>();",
            "        for (int i = 0; i < numbers.size(); i++) {",
            "            results.add(numbers.subList(0, i + 1).stream().max(Long::compare).get());",
            "        }",
            "        return results;",
            "    }",
            "}"
        ]
    }
]