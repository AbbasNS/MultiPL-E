[
    {
        "language": "js",
        "prompt": "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n",
        "body": [
            "  for(var i = 0; i < numbers.length; i++){",
            "    for(var j = i + 1; j < numbers.length; j++){",
            "      if(Math.abs(numbers[i] - numbers[j]) < threshold){",
            "        return true;",
            "      }",
            "    }",
            "  }",
            "  return false;",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n",
        "body": [
            "    let arr = [];",
            "    for(let i = 0; i < n; i++){",
            "        arr.push(n + (i * 2));",
            "    }",
            "    return arr;",
            "}"
        ]
    },
    {
        "language": "js",
        "prompt": "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n",
        "body": [
            "    let res = s.split(/[\\s,]+/).filter(Boolean);",
            "    return res;",
            "}"
        ]
    },
    {
        "language": "js",
        "prompt": "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n",
        "body": [
            "\tvar num = -1;",
            "\tfor(var i = x; i <= y; i++){",
            "\t\tif(i % 2 == 0){",
            "\t\t\tnum = i;",
            "\t\t}",
            "\t}",
            "\treturn num;",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n",
        "body": [
            "    let result = []",
            "    for(let i = 0; i < x.length; i++){",
            "        let num = x[i].toString()",
            "        if(num.indexOf('2') === -1 && num.indexOf('4') === -1 && num.indexOf('6') === -1 && num.indexOf('8') === -1 && num.indexOf('0') === -1){",
            "            result.push(x[i])",
            "        }",
            "    }",
            "    return result.sort(function(a, b){return a-b})",
            "}",
            "",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n",
        "body": [
            "    var arr2 = [];",
            "    for(var i = 0; i < arr.length; i++){",
            "        var num = arr[i];",
            "        if(num > 0 && num < 10){",
            "            arr2.push(num);",
            "        }",
            "    }",
            "    arr2.sort();",
            "    arr2.reverse();",
            "    var arr3 = [];",
            "    for(var i = 0; i < arr2.length; i++){",
            "        var num = arr2[i];",
            "        if(num == 1){",
            "            arr3.push(\"One\");",
            "        }",
            "        else if(num == 2){",
            "            arr3.push(\"Two\");",
            "        }",
            "        else if(num == 3){",
            "            arr3.push(\"Three\");",
            "        }",
            "        else if(num == 4){",
            "            arr3.push(\"Four\");",
            "        }",
            "        else if(num == 5){",
            "            arr3.push(\"Five\");",
            "        }",
            "        else if(num == 6){",
            "            arr3.push(\"Six\");",
            "        }",
            "        else if(num == 7){",
            "            arr3.push(\"Seven\");",
            "        }",
            "        else if(num == 8){",
            "            arr3.push(\"Eight\");",
            "        }",
            "        else if(num == 9){",
            "            arr3.push(\"Nine\");",
            "        }",
            "    }",
            "    return arr3;",
            "}"
        ]
    },
    {
        "language": "js",
        "prompt": "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n",
        "body": [
            "    var result = [];",
            "    var sum = 0;",
            "    var factorial = 1;",
            "    for(var i = 1; i <= n; i++){",
            "        if(i % 2 == 0){",
            "            for(var j = 1; j <= i; j++){",
            "                factorial *= j;",
            "            }",
            "            result.push(factorial);",
            "            factorial = 1;",
            "        }else{",
            "            for(var k = 1; k <= i; k++){",
            "                sum += k;",
            "            }",
            "            result.push(sum);",
            "            sum = 0;",
            "        }",
            "    }",
            "    return result;",
            "}"
        ]
    },
    {
        "language": "js",
        "prompt": "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n",
        "body": [
            "    var pal = [];",
            "    var isPalindrome = function(x){",
            "        var y = x.toString().split('').reverse().join('');",
            "        return y == x;",
            "    }",
            "    for(var i = 1; i <= n; i++){",
            "        if(isPalindrome(i)){",
            "            pal.push(i);",
            "        }",
            "    }",
            "    var odd = 0;",
            "    var even = 0;",
            "    for(var i = 0; i < pal.length; i++){",
            "        if(pal[i] % 2 == 0){",
            "            even++;",
            "        }",
            "        else{",
            "            odd++;",
            "        }",
            "    }",
            "    return [even, odd];",
            "}"
        ]
    },
    {
        "language": "js",
        "prompt": "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n",
        "body": [
            "\tif(!arr.length) {",
            "\t\treturn 0;",
            "\t}",
            "\tvar count = 0;",
            "\tfor(var i = 0; i < arr.length; i++) {",
            "\t\tvar sum = 0;",
            "\t\tvar str = arr[i].toString();",
            "\t\tif(str[0] === '-') {",
            "\t\t\tsum += Number(str[0] + str[1]);",
            "\t\t\tfor(var j = 2; j < str.length; j++) {",
            "\t\t\t\tsum += Number(str[j]);",
            "\t\t\t}",
            "\t\t} else {",
            "\t\t\tfor(var k = 0; k < str.length; k++) {",
            "\t\t\t\tsum += Number(str[k]);",
            "\t\t\t}",
            "\t\t}",
            "\t\tif(sum > 0) {",
            "\t\t\tcount++;",
            "\t\t}",
            "\t}",
            "\treturn count;",
            "}"
        ]
    },
    {
        "language": "js",
        "prompt": "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n",
        "body": [
            "    var diff_count = 0;",
            "    var i = 0;",
            "    var temp = 0;",
            "    for(var i = 0; i < arr.length - 1; i++){",
            "        if(arr[i] > arr[i + 1]){",
            "            diff_count += 1;",
            "        }",
            "    }",
            "    if(diff_count > 1){",
            "        return false;",
            "    }",
            "    else{",
            "        return true;",
            "    }",
            "}"
        ]
    },
    {
        "language": "js",
        "prompt": "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n",
        "body": [
            "\tvar string_length = string.length;",
            "\tvar is_palindrome = function(s){",
            "\t\treturn s == s.split(\"\").reverse().join(\"\");",
            "\t};",
            "\tvar i = string_length;",
            "\twhile(i > 0){",
            "\t\tif(is_palindrome(string.substring(0, i))){",
            "\t\t\treturn string + string.substring(0, string_length - i).split(\"\").reverse().join(\"\");",
            "\t\t}",
            "\t\ti--;",
            "\t}",
            "\treturn string;",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n",
        "body": [
            "    var num1 = 0;",
            "    var num2 = 0;",
            "    var exchange = true;",
            "    while(num1 < lst1.length && exchange){",
            "        if(lst1[num1] % 2 !== 0){",
            "            exchange = false;",
            "            if(num2 < lst2.length){",
            "                while(num2 < lst2.length && exchange == false){",
            "                    if(lst2[num2] % 2 == 0){",
            "                        lst1[num1] = lst2[num2];",
            "                        exchange = true;",
            "                    }",
            "                    num2++;",
            "                }",
            "            }",
            "        }",
            "        num1++;",
            "    }",
            "    if(exchange){",
            "        return \"YES\";",
            "    }else{",
            "        return \"NO\";",
            "    }",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n",
        "body": [
            "  if (test.length === 0){",
            "    return {};",
            "  }",
            "  var lst = test.split(\" \");",
            "  var count = {};",
            "  for (var i = 0; i < lst.length; i++){",
            "    if (count[lst[i]]){",
            "      count[lst[i]] += 1;",
            "    }",
            "    else{",
            "      count[lst[i]] = 1;",
            "    }",
            "  }",
            "  console.log(count);",
            "  var max = 0;",
            "  var result = {};",
            "  for (var key in count){",
            "    if (count[key] > max){",
            "      max = count[key];",
            "      result = {};",
            "      result[key] = max;",
            "    }",
            "    else if (count[key] === max){",
            "      result[key] = max;",
            "    }",
            "  }",
            "  return result;",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n",
        "body": [
            "    const filter = s.split('').filter(x => c.includes(x) === false);",
            "    const filterString = filter.join('');",
            "    const filterStringReverse = filter.reverse().join('');",
            "    const result = [];",
            "    if (filterString === filterStringReverse) {",
            "        result.push(filterString, true);",
            "    } else {",
            "        result.push(filterString, false);",
            "    }",
            "    return result;",
            "}"
        ]
    },
    {
        "language": "js",
        "prompt": "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n",
        "body": [
            "    var new_lst = [];",
            "    for (var i = 0; i < lst.length; i++){",
            "        var word = lst[i];",
            "        var odd_sum = 0;",
            "        for (var j = 0; j < word.length; j++){",
            "            if (word[j] % 2 == 1){",
            "                odd_sum += 1;",
            "            }",
            "        }",
            "        var odd_word = \"the number of odd elements \" + odd_sum + \"n the str\" + odd_sum + \"ng \" + odd_sum + \" of the \" + odd_sum + \"nput.\";",
            "        new_lst.push(odd_word);",
            "    }",
            "    return new_lst;",
            "}"
        ]
    },
    {
        "language": "js",
        "prompt": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n",
        "body": [
            "    let sum = 0;",
            "    let minSum = nums[0];",
            "    for(let i = 0; i < nums.length; i++){",
            "        sum += nums[i];",
            "        if(sum < minSum){",
            "            minSum = sum;",
            "        }",
            "        if(sum > 0){",
            "            sum = 0;",
            "        }",
            "    }",
            "    return minSum;",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n",
        "body": [
            "    var maxFill = 0;",
            "    var sum = 0;",
            "    var c = 1;",
            "    var r = grid.length;",
            "    var c = grid[0].length;",
            "    for(var i = 0; i < r; i++){",
            "        sum = 0;",
            "        for(var j = 0; j < c; j++){",
            "            sum += grid[i][j];",
            "        }",
            "        maxFill += Math.ceil(sum/capacity);",
            "    }",
            "    return maxFill;",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n",
        "body": [
            "    return arr.sort((a, b) => {",
            "        let aBinary = a.toString(2).split('').filter(el => el === '1').length;",
            "        let bBinary = b.toString(2).split('').filter(el => el === '1').length;",
            "        if (aBinary === bBinary) {",
            "            return a - b;",
            "        } else {",
            "            return aBinary - bBinary;",
            "        }",
            "    });",
            "}"
        ]
    },
    {
        "language": "js",
        "prompt": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n",
        "body": [
            "  let words = s.split(' ').filter(e => e != '');",
            "  let selected = words.filter(e => e.match(/[bcdfghjklmnpqrstvwxyz]/gi) != null);",
            "  if(n > 0){",
            "    return selected.filter(e => e.match(/[bcdfghjklmnpqrstvwxyz]/gi).length == n);",
            "  }else{",
            "    return [];",
            "  }",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n",
        "body": [
            "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];",
            "    let i = word.length - 1;",
            "    let result = [];",
            "    if (word.length === 1) {",
            "        return \"\"",
            "    } else {",
            "        while (i >= 0) {",
            "            if (vowels.includes(word[i])) {",
            "                if (i > 0 && i < word.length - 1) {",
            "                    if (!vowels.includes(word[i-1]) && !vowels.includes(word[i+1])) {",
            "                        result.push(word[i]);",
            "                    }",
            "                }",
            "            }",
            "            i--;",
            "        }",
            "        if (result.length === 0) {",
            "            return \"\"",
            "        } else {",
            "            return result[0];",
            "        }",
            "    }",
            "}"
        ]
    },
    {
        "language": "js",
        "prompt": "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n",
        "body": [
            "\tconst open = '(';",
            "\tconst close = ')';",
            "\tconst is_good = (s) => {",
            "\t\tlet stack = [];",
            "\t\tfor (let p of s){",
            "\t\t\tif (p === open){",
            "\t\t\t\tstack.push(p);",
            "\t\t\t} else if (p === close){",
            "\t\t\t\tif (stack.length === 0){",
            "\t\t\t\t\treturn false;",
            "\t\t\t\t}",
            "\t\t\t\tstack.pop();",
            "\t\t\t}",
            "\t\t}",
            "\t\treturn stack.length === 0;",
            "\t};",
            "\tconst str1 = lst[0];",
            "\tconst str2 = lst[1];",
            "\tif (is_good(str1 + str2)){",
            "\t\treturn 'Yes';",
            "\t}",
            "\tif (is_good(str2 + str1)){",
            "\t\treturn 'Yes';",
            "\t}",
            "\treturn 'No';",
            "}"
        ]
    },
    {
        "language": "js",
        "prompt": "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n",
        "body": [
            "  var arrayA = [];",
            "  var arrayB = [];",
            "  var arrayXOR = [];",
            "  var result = '';",
            "  for (var i = 0; i < a.length; i++) {",
            "    arrayA.push(parseInt(a[i]));",
            "  }",
            "  for (var j = 0; j < b.length; j++) {",
            "    arrayB.push(parseInt(b[j]));",
            "  }",
            "  for (var k = 0; k < arrayA.length; k++) {",
            "    if (arrayA[k] !== arrayB[k]) {",
            "      arrayXOR.push(1);",
            "    }",
            "    else {",
            "      arrayXOR.push(0);",
            "    }",
            "  }",
            "  result = arrayXOR.join('');",
            "  return result;",
            "}"
        ]
    },
    {
        "language": "js",
        "prompt": "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n",
        "body": [
            "    var len = arr.length;",
            "    if(len === 0) return null;",
            "    if(len === 1) return arr;",
            "    // sort function can also be used",
            "    // sort() method sorts the elements of an array in place and returns the sorted array.",
            "    // The default sort order is built upon converting the elements into strings, ",
            "    // then comparing their sequences of UTF-16 code units values.",
            "    // arr.sort((a, b) => a - b);",
            "    // var result = [];",
            "    // for(var i = len - 1; i >= len - k; i--){",
            "    //     result.push(arr[i]);",
            "    // }",
            "    // return result;",
            "    return arr.sort((a, b) => a - b).slice(len - k);",
            "}"
        ]
    },
    {
        "language": "js",
        "prompt": "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n",
        "body": [
            "  let result = 0;",
            "  for (let i = 0; i < lst.length; i++){",
            "    if (i % 2 === 0){",
            "      if (lst[i] % 2 === 1){",
            "        result += lst[i];",
            "      }",
            "    }",
            "  }",
            "  return result;",
            "}"
        ]
    },
    {
        "language": "js",
        "prompt": "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n",
        "body": [
            "  var sum = 0;",
            "  for(var i = 0; i < k; i++){",
            "    if(arr[i] < 100){",
            "      sum += arr[i];",
            "    }",
            "  }",
            "  return sum;",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n",
        "body": [
            "    var collatz_sequence = []",
            "    var odd_numbers = []",
            "    var odd_count = 0",
            "    collatz_sequence.push(n)",
            "    for(var i = 0; i < collatz_sequence.length; i++){",
            "        if(collatz_sequence[i]%2 == 0){",
            "            collatz_sequence.push(collatz_sequence[i]/2)",
            "        }",
            "        else if(collatz_sequence[i]%2 == 1){",
            "            collatz_sequence.push(collatz_sequence[i]*3+1)",
            "        }",
            "        if(collatz_sequence[i]%2 == 1){",
            "            odd_numbers.push(collatz_sequence[i])",
            "            odd_count += 1",
            "        }",
            "        if(collatz_sequence[i] == 1){",
            "            break",
            "        }",
            "    }",
            "    if(odd_count != 0){",
            "        odd_numbers.sort(function(a, b){return a-b})",
            "        return odd_numbers",
            "    }",
            "    else{",
            "        odd_numbers.push(1)",
            "        return odd_numbers",
            "    }",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n",
        "body": [
            "    var date_arr = date.split(\"-\");",
            "    if(date_arr.length == 3){",
            "        var month = parseInt(date_arr[0]);",
            "        var day = parseInt(date_arr[1]);",
            "        var year = parseInt(date_arr[2]);",
            "        if(month < 1 || month > 12){",
            "            return false;",
            "        }else if(month == 2){",
            "            if(day < 1 || day > 29){",
            "                return false;",
            "            }",
            "        }else if((month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) && (day < 1 || day > 31)){",
            "            return false;",
            "        }else if((month == 4 || month == 6 || month == 9 || month == 11) && (day < 1 || day > 30)){",
            "            return false;",
            "        }",
            "        return true;",
            "    }",
            "    return false;",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n",
        "body": [
            "    if(txt.includes(' ')){",
            "        return txt.split(' ');",
            "    }",
            "    else if(txt.includes(',')){",
            "        return txt.split(',');",
            "    }",
            "    else{",
            "        let count = 0;",
            "        for(let i = 0; i < txt.length; i++){",
            "            if(i % 2 != 0){",
            "                if(txt[i] == txt[i].toLowerCase()){",
            "                    count++;",
            "                }",
            "            }",
            "        }",
            "        return count;",
            "    }",
            "}"
        ]
    },
    {
        "language": "js",
        "prompt": "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n",
        "body": [
            "    var last = null;",
            "    var dupe_found = false;",
            "    for (var x of lst){",
            "        if (last == null){",
            "            last = x;",
            "        } else if (x < last){",
            "            return false;",
            "        } else if (x == last){",
            "            if (dupe_found){",
            "                return false;",
            "            } else {",
            "                dupe_found = true;",
            "            }",
            "        } else {",
            "            last = x;",
            "            dupe_found = false;",
            "        }",
            "    }",
            "    return true;",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n",
        "body": [
            "    let start = Math.max(interval1[0], interval2[0]);",
            "    let end = Math.min(interval1[1], interval2[1]);",
            "    if (start >= end) {",
            "        return \"NO\";",
            "    }",
            "    let length = end - start;",
            "    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];",
            "    return primes.includes(length) ? \"YES\" : \"NO\";",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n",
        "body": [
            "   var total = 0;",
            "   var len = arr.length;",
            "   var pro = 1;",
            "   if(len == 0){",
            "       return undefined;",
            "   }",
            "   else{",
            "       for(var i = 0; i < len; i++){",
            "           total += Math.abs(arr[i]);",
            "           if(arr[i] < 0){",
            "               pro *= -1;",
            "           }",
            "           else if(arr[i] == 0){",
            "               pro *= 0;",
            "           }",
            "       }",
            "       total *= pro;",
            "       return total;",
            "   }",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n",
        "body": [
            "    let n = grid.length;",
            "    let path = [];",
            "    // Determine which cell to start from",
            "    let startCell = grid[0][0];",
            "    for(let i = 0; i < n; i++){",
            "        for(let j = 0; j < n; j++){",
            "            let curr = grid[i][j];",
            "            if(curr < startCell){",
            "                startCell = curr;",
            "            }",
            "        }",
            "    }",
            "    // Greedy",
            "    // For every step, determine which neighbour cell to visit",
            "    let currCell = startCell;",
            "    for(let l = 0; l < k; l++){",
            "        path.push(currCell);",
            "        let neighbours = [];",
            "        // Find the coordinates of currCell in grid",
            "        let x = null;",
            "        let y = null;",
            "        for(let i = 0; i < n; i++){",
            "            for(let j = 0; j < n; j++){",
            "                if(grid[i][j] === currCell){",
            "                    x = i;",
            "                    y = j;",
            "                }",
            "            }",
            "        }",
            "        // Find all neighbouring cells of currCell",
            "        if(x > 0){",
            "            neighbours.push(grid[x - 1][y]);",
            "        }",
            "        if(x < n - 1){",
            "            neighbours.push(grid[x + 1][y]);",
            "        }",
            "        if(y > 0){",
            "            neighbours.push(grid[x][y - 1]);",
            "        }",
            "        if(y < n - 1){",
            "            neighbours.push(grid[x][y + 1]);",
            "        }",
            "        // Update currCell to be the next cell to visit",
            "        let nextCell = neighbours[0];",
            "        for(let i = 0; i < neighbours.length; i++){",
            "            let curr = neighbours[i];",
            "            if(curr < nextCell){",
            "                nextCell = curr;",
            "            }",
            "        }",
            "        currCell = nextCell;",
            "    }",
            "    return path;",
            "}"
        ]
    },
    {
        "language": "js",
        "prompt": "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n",
        "body": [
            "  var result;",
            "  if (strings.length === 0) {",
            "    return undefined;",
            "  }",
            "  for (var i = 0; i < strings.length; i++) {",
            "    if (!result || strings[i].length > result.length) {",
            "      result = strings[i];",
            "    }",
            "  }",
            "  return result;",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n",
        "body": [
            "    if(!n){",
            "        return \"error\";",
            "    }",
            "    if(n < 0){",
            "        return \"error\";",
            "    }",
            "    var temp = 0;",
            "    var prod = 1;",
            "    var odd = true;",
            "    for(n; n > 0; n = Math.floor(n/10)){",
            "        temp = n % 10;",
            "        if(temp % 2 != 0){",
            "            prod *= temp;",
            "            odd = false;",
            "        }",
            "    }",
            "    if(odd){",
            "        return 0;",
            "    }",
            "    return prod;",
            "}",
            "",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n",
        "body": [
            "    return lst.map(num => Math.ceil(num)).reduce((sum, num) => sum + num ** 2, 0);",
            "}"
        ]
    },
    {
        "language": "js",
        "prompt": "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n",
        "body": [
            "    var result=txt.split(\" \");",
            "    if(result[result.length-1].length==1 && result[result.length-1].match(/[a-z]/i)){",
            "        return true;",
            "    }",
            "    return false;",
            "}"
        ]
    },
    {
        "language": "js",
        "prompt": "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n",
        "body": [
            "  var max = arr[0];",
            "  var res = -1;",
            "  for(var i = 1; i < arr.length; i++){",
            "    if(arr[i] < max){",
            "      res = i;",
            "    }else{",
            "      max = arr[i];",
            "    }",
            "  }",
            "  return res;",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n",
        "body": [
            "    return[lst.filter(x=>x<0).sort((a,b)=>b-a)[0],lst.filter(x=>x>0).sort((a,b)=>a-b)[0]]",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n",
        "body": [
            "  if (typeof a === typeof b){",
            "    if (a > b) {",
            "      return a;",
            "    } else if (a < b) {",
            "      return b;",
            "    } else {",
            "      return undefined;",
            "    }",
            "  }",
            "  else if (typeof a === \"string\" && typeof b === \"number\"){",
            "    if (a[0] > b){",
            "      return a;",
            "    } else if (a[0] < b){",
            "      return b;",
            "    } else {",
            "      return undefined;",
            "    }",
            "  }",
            "  else if (typeof a === \"number\" && typeof b === \"string\"){",
            "    if (a > b[0]){",
            "      return a;",
            "    } else if (a < b[0]){",
            "      return b;",
            "    } else {",
            "      return undefined;",
            "    }",
            "  }",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n",
        "body": [
            "    let m =0;",
            "    for(let i=2;i<n;i+=2){",
            "        for(let j=2;j<n;j+=2){",
            "            for(let k=2;k<n;k+=2){",
            "                for(let l=2;l<n;l+=2){",
            "                    if((i+j+k+l)==n){",
            "                        m=1;",
            "                        break;",
            "                    }",
            "                }",
            "            }",
            "        }",
            "    }",
            "    if(m==1){",
            "        return true;",
            "    }",
            "    else{",
            "        return false;",
            "    }",
            "}"
        ]
    },
    {
        "language": "js",
        "prompt": "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n",
        "body": [
            "    if (n > 0) {",
            "        let fact = 1;",
            "        for (let i = 1; i <= n; i++) {",
            "            fact *= i;",
            "        }",
            "        return fact * special_factorial(n - 1);",
            "    } else {",
            "        return 1;",
            "    }",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n",
        "body": [
            "\tlet max = Math.max(a, b)",
            "\tlet min = Math.min(a, b)",
            "\tif (max % min == 0) {",
            "\t\treturn min",
            "\t} else {",
            "\t\treturn greatest_common_divisor(min, max % min)",
            "\t}",
            "}",
            "",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n",
        "body": [
            "    var n = text.replace(/\\s/g, \"_\");",
            "    var k = n.replace(/___/g, \"-\");",
            "    return k;",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n",
        "body": [
            "    let str_1 = file_name.slice(0,file_name.indexOf('.'));",
            "    let str_2 = file_name.slice(file_name.indexOf('.')+1);",
            "    let str_3 = file_name.split('');",
            "    if (file_name.includes('.') && /[a-zA-Z]/.test(str_1[0]) && ",
            "    (str_2 == 'txt' || str_2 == 'exe' || str_2 == 'dll') && str_1.length != 0 && ",
            "    str_3.filter(item => /[0-9]/.test(item)).length < 4) {",
            "        return 'Yes';",
            "    }",
            "    return 'No';",
            "}",
            "",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n",
        "body": [
            "\tvar sum = 0;",
            "\tvar len = lst.length;",
            "\tfor (var i = 0; i < len; i++){",
            "\t\tif (i % 3 == 0){",
            "\t\t\tsum += lst[i]*lst[i];",
            "\t\t} else if (i % 4 == 0){",
            "\t\t\tsum += lst[i]*lst[i]*lst[i];",
            "\t\t} else {",
            "\t\t\tsum += lst[i];",
            "\t\t}",
            "\t}",
            "\treturn sum;",
            "}"
        ]
    },
    {
        "language": "js",
        "prompt": "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n",
        "body": [
            "    // var words = sentence.split(' ');",
            "    // var result = '';",
            "    // var isPrime = true;",
            "    // for(var i = 0; i < words.length; i++){",
            "    //     if(words[i].length > 1){",
            "    //         for(var j = 2; j < words[i].length; j++){",
            "    //             if(words[i].length % j === 0){",
            "    //                 isPrime = false;",
            "    //                 break;",
            "    //             }",
            "    //         }",
            "    //         if(isPrime){",
            "    //             result += words[i] + ' ';",
            "    //         }",
            "    //         isPrime = true;",
            "    //     }",
            "    // }",
            "    // return result.trim();",
            "    return sentence.split(' ').filter(word => {",
            "        var number = word.length;",
            "        var isPrime = true;",
            "        if(number === 1 || number === 0){",
            "            return false;",
            "        }",
            "        for(var i = 2; i < number; i++){",
            "            if(number % i === 0){",
            "                isPrime = false;",
            "                break;",
            "            }",
            "        }",
            "        return isPrime;",
            "    }).join(' ');",
            "}"
        ]
    },
    {
        "language": "js",
        "prompt": "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n",
        "body": [
            "    let xNumerator = parseInt(x.split('/')[0]);",
            "    let xDenominator = parseInt(x.split('/')[1]);",
            "    let nNumerator = parseInt(n.split('/')[0]);",
            "    let nDenominator = parseInt(n.split('/')[1]);",
            "    let xTimesN = xNumerator * nNumerator / (xDenominator * nDenominator);",
            "    return Number.isInteger(xTimesN);",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n",
        "body": [
            "  let count = 0;",
            "  for(let i = 0; i < nums.length; i++){",
            "    let num = nums[i];",
            "    let firstDigit = nums[i].toString()[0];",
            "    let lastDigit = nums[i].toString()[nums[i].toString().length - 1];",
            "    if(num > 10 && firstDigit % 2 !== 0 && lastDigit % 2 !== 0){",
            "      count++;",
            "    }",
            "  }",
            "  return count;",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n",
        "body": [
            "    let result = 0;",
            "    let arr = [];",
            "    for(let i = 1; i<=n; i++){",
            "        arr.push(i*i-i+1);",
            "    }",
            "    for(let i = 0; i<arr.length; i++){",
            "        for(let j = i+1; j<arr.length; j++){",
            "            for(let k = j+1; k<arr.length; k++){",
            "                if((arr[i]+arr[j]+arr[k])%3 === 0){",
            "                    result++;",
            "                }",
            "            }",
            "        }",
            "    }",
            "    return result;",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n",
        "body": [
            "    var planets = {",
            "        'Mercury':1,",
            "        'Venus':2,",
            "        'Earth':3,",
            "        'Mars':4,",
            "        'Jupiter':5,",
            "        'Saturn':6,",
            "        'Uranus':7,",
            "        'Neptune':8",
            "    }",
            "    if(!planets[planet1] || !planets[planet2]){",
            "        return [];",
            "    }",
            "    var keys = Object.keys(planets);",
            "    var position1 = keys.indexOf(planet1);",
            "    var position2 = keys.indexOf(planet2);",
            "    if(position1 > position2){",
            "        var temp = position1;",
            "        position1 = position2;",
            "        position2 = temp;",
            "    }",
            "    var res = [];",
            "    for(var i = position1 + 1; i < position2; i++){",
            "        res.push(keys[i]);",
            "    }",
            "    return res;",
            "}"
        ]
    },
    {
        "language": "js",
        "prompt": "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n",
        "body": [
            "    var result = [];",
            "    for(var i = 0; i < lst.length; i++){",
            "        if(lst[i].length % 2 == 0){",
            "            result.push(lst[i]);",
            "        }",
            "    }",
            "    return result.sort(function(a, b){",
            "        if(a.length < b.length){",
            "            return -1;",
            "        }",
            "        else if(a.length > b.length){",
            "            return 1;",
            "        }",
            "        else{",
            "            if(a < b){",
            "                return -1;",
            "            }",
            "            else if(a > b){",
            "                return 1;",
            "            }",
            "            else{",
            "                return 0;",
            "            }",
            "        }",
            "    });",
            "}",
            "var a = [\"aa\", \"a\", \"aaa\"];",
            "var b = [\"ab\", \"a\", \"aaa\", \"cd\"];"
        ]
    },
    {
        "language": "js",
        "prompt": "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n",
        "body": [
            "    // Your code here",
            "    var result = [];",
            "    for (var i = 1; i <= string.length; i++){",
            "        result.push(string.slice(0, i));",
            "    }",
            "    return result;",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n",
        "body": [
            "\tif(n<2){",
            "\t\treturn y;",
            "\t}",
            "\tfor(var i=2; i<n; i++){",
            "\t\tif(n%i==0){",
            "\t\t\treturn y;",
            "\t\t}",
            "\t}",
            "\treturn x;",
            "}"
        ]
    },
    {
        "language": "js",
        "prompt": "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n",
        "body": [
            "    sum = 0;",
            "    for (var i = 0; i < lst.length; i++){",
            "        if(lst[i] % 2 == 1 && lst[i] > 0){",
            "            sum += lst[i] ** 2;",
            "        }",
            "    }",
            "    return sum;",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n",
        "body": [
            "  let result = [];",
            "  for(let i = 0; i < game.length; i++){",
            "    if(game[i] === guess[i]){",
            "      result.push(0);",
            "    } else {",
            "      result.push(Math.abs(game[i] - guess[i]));",
            "    }",
            "  }",
            "  return result;",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n",
        "body": [
            "  var output = class_name + \".\";",
            "  var min_strength = 1;",
            "  for (var i = 0; i < extensions.length; i++) {",
            "    var strength = -1*(extensions[i].replace(/[^A-Z]/g, \"\").length - extensions[i].replace(/[^a-z]/g, \"\").length);",
            "    if (strength < min_strength) {",
            "      min_strength = strength;",
            "      output = class_name + \".\" + extensions[i];",
            "    }",
            "  }",
            "  return output;",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n",
        "body": [
            "    var result = false;",
            "    for(var i = 0; i < b.length; i++){",
            "        result = result || a.includes(b);",
            "        b = b.slice(1) + b[0];",
            "    }",
            "    return result;",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n",
        "body": [
            "\tnum = Math.abs(num);",
            "\tvar evens = 0;",
            "\tvar odds = 0;",
            "\tfor(var i = 0; i < num.toString().length; i++){",
            "\t\tif(num.toString()[i] % 2 == 0){",
            "\t\t\tevens ++;",
            "\t\t}",
            "\t\telse{",
            "\t\t\todds ++;",
            "\t\t}",
            "\t}",
            "\treturn [evens, odds];",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n",
        "body": [
            "    // Set up the roman numberal conversion dictionary",
            "    var roman_conversion = {",
            "        1000: \"m\",",
            "        900: \"cm\",",
            "        500: \"d\",",
            "        400: \"cd\",",
            "        100: \"c\",",
            "        90: \"xc\",",
            "        50: \"l\",",
            "        40: \"xl\",",
            "        10: \"x\",",
            "        9: \"ix\",",
            "        5: \"v\",",
            "        4: \"iv\",",
            "        1: \"i\"",
            "    };",
            "    // Set up the output string",
            "    var output = \"\";",
            "    // Find the biggest key in the dictionary that is less than the input number",
            "    // and subtract it from the input number.",
            "    // Repeat until the input number is 0.",
            "    while (number > 0){",
            "        var key_list = Object.keys(roman_conversion).map(Number);",
            "        key_list.sort(function(a, b){return b-a});",
            "        for (var i = 0; i < key_list.length; i++){",
            "            if (key_list[i] <= number){",
            "                output += roman_conversion[key_list[i]];",
            "                number -= key_list[i];",
            "                break;",
            "            }",
            "        }",
            "    }",
            "    return output;",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n",
        "body": [
            "    if(a**2 + b**2 == c**2 || b**2 + c**2 == a**2 || a**2 + c**2 == b**2) {",
            "        return true;",
            "    } else {",
            "        return false;",
            "    }",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n",
        "body": [
            "    var max_unique = {};",
            "    var max_unique_word = \"\";",
            "    for(var i = 0; i < words.length; i++){",
            "        var unique_word = {};",
            "        var word = words[i];",
            "        for(var j = 0; j < word.length; j++){",
            "            var char = word[j];",
            "            if(unique_word[char] === undefined){",
            "                unique_word[char] = 1;",
            "            }",
            "        }",
            "        if(max_unique_word === \"\"){",
            "            max_unique_word = word;",
            "            max_unique = unique_word;",
            "        }",
            "        else if(Object.keys(unique_word).length > Object.keys(max_unique).length){",
            "            max_unique_word = word;",
            "            max_unique = unique_word;",
            "        }",
            "        else if(Object.keys(unique_word).length === Object.keys(max_unique).length){",
            "            if(word < max_unique_word){",
            "                max_unique_word = word;",
            "                max_unique = unique_word;",
            "            }",
            "        }",
            "    }",
            "    return max_unique_word;",
            "}"
        ]
    },
    {
        "language": "js",
        "prompt": "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n",
        "body": [
            "  if (need > remaining) return [number + remaining, 0];",
            "  else return [number + need, remaining - need];",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n",
        "body": [
            "    let arr = [];",
            "    for(let i = 0; i <= n; i++){",
            "        arr.push(i);",
            "    }",
            "    return arr.join(\" \");",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n",
        "body": [
            "  let do_again;",
            "  let count = 0;",
            "  let temp;",
            "  let answer;",
            "  while(count < operator.length){",
            "    switch(operator[count]){",
            "      case '*':",
            "        operand[count] = operand[count] * operand[count + 1];",
            "        operand.splice(count + 1, 1);",
            "        operator.splice(count, 1);",
            "        count = 0;",
            "        do_again = true;",
            "        break;",
            "      case '//':",
            "        operand[count] = Math.floor(operand[count] / operand[count + 1]);",
            "        operand.splice(count + 1, 1);",
            "        operator.splice(count, 1);",
            "        count = 0;",
            "        do_again = true;",
            "        break;",
            "      case '**':",
            "        operand[count] = Math.pow(operand[count], operand[count + 1]);",
            "        operand.splice(count + 1, 1);",
            "        operator.splice(count, 1);",
            "        count = 0;",
            "        do_again = true;",
            "        break;",
            "      default:",
            "        count++;",
            "        do_again = false;",
            "    }",
            "  }",
            "  answer = operand[0];",
            "  operand.splice(0, 1);",
            "  while(operand.length > 0){",
            "    switch(operator[0]){",
            "      case '+':",
            "        answer += operand[0];",
            "        break;",
            "      case '-':",
            "        answer -= operand[0];",
            "        break;",
            "    }",
            "    operand.splice(0, 1);",
            "    operator.splice(0, 1);",
            "  }",
            "  return answer;",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n",
        "body": [
            "    let letters = s.match(/[a-z]/ig);",
            "    if(letters) {",
            "      const swapped =  s.split('').map(char => {",
            "            if(/[a-z]/i.test(char)) {",
            "                return char === char.toLowerCase()",
            "                ? char.toUpperCase()",
            "                : char.toLowerCase();",
            "            }",
            "            return char;",
            "        });",
            "        return swapped.join('');",
            "    }",
            "    return s.split('').reverse().join('');",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n",
        "body": [
            "    if(text === ''){",
            "        return undefined;",
            "    }",
            "    return require('crypto').createHash('md5').update(text).digest('hex');",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n",
        "body": [
            "  var arr = string.split(\"\");",
            "  var result = [];",
            "  for(var i = 0; i < arr.length; i++){",
            "    if(result.indexOf(arr[i].toLowerCase()) < 0){",
            "      result.push(arr[i].toLowerCase());",
            "    }",
            "  }",
            "  return result.length;",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n",
        "body": [
            "    let songs = music_string.split(' ');",
            "    let song = [];",
            "    songs.forEach(s => {",
            "        if(s === 'o'){",
            "            song.push(4);",
            "        }else if(s === 'o|'){",
            "            song.push(2);",
            "        }else if(s === '.|'){",
            "            song.push(1);",
            "        }",
            "    });",
            "    return song;",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n",
        "body": [
            "\tvar i = 0;",
            "\tvar count = 0;",
            "\twhile(string.indexOf(substring, i) !== -1){",
            "\t\tcount++;",
            "\t\ti = string.indexOf(substring, i) + 1;",
            "\t}",
            "\treturn count;",
            "}"
        ]
    },
    {
        "language": "js",
        "prompt": "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n",
        "body": [
            "  //your code here",
            "  var numString = numbers.split(\" \");",
            "  var numMap = {",
            "      \"zero\": 0,",
            "      \"one\": 1,",
            "      \"two\": 2,",
            "      \"three\": 3,",
            "      \"four\": 4,",
            "      \"five\": 5,",
            "      \"six\": 6,",
            "      \"seven\": 7,",
            "      \"eight\": 8,",
            "      \"nine\": 9",
            "  };",
            "  numString.sort(function(a, b){",
            "    return numMap[a] - numMap[b];",
            "  });",
            "  numString = numString.join(\" \");",
            "  return numString;",
            "}"
        ]
    },
    {
        "language": "js",
        "prompt": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n",
        "body": [
            "    var count = 0;",
            "    var group = '';",
            "    var groups = [];",
            "    for (var i = 0; i < paren_string.length; i++){",
            "        if (paren_string[i] === '('){",
            "            count++;",
            "            group += paren_string[i];",
            "        } else if (paren_string[i] === ')'){",
            "            count--;",
            "            group += paren_string[i];",
            "        }",
            "        if (count === 0 && group){",
            "            groups.push(group);",
            "            group = '';",
            "        }",
            "    }",
            "    return groups;",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n",
        "body": [
            "  let closest = Math.abs(numbers[0] - numbers[1]);",
            "  let a = numbers[0];",
            "  let b = numbers[1];",
            "  for (let i = 0; i < numbers.length; i++) {",
            "    for (let j = i + 1; j < numbers.length; j++) {",
            "      if (Math.abs(numbers[i] - numbers[j]) < closest) {",
            "        closest = Math.abs(numbers[i] - numbers[j]);",
            "        a = numbers[i];",
            "        b = numbers[j];",
            "      }",
            "    }",
            "  }",
            "  return a > b ? [b, a] : [a, b];",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n",
        "body": [
            "  var min = Math.min.apply(Math, numbers);",
            "  var max = Math.max.apply(Math, numbers);",
            "  var sub = max - min;",
            "  var unit = [];",
            "  for (var i = 0; i < numbers.length; i++) {",
            "    unit.push((numbers[i] - min) / sub);",
            "  }",
            "  return unit;",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n",
        "body": [
            "\tvar result = [];",
            "\tvalues.forEach(function(value){",
            "\t\tif(typeof value === \"number\" && value % 1 === 0){",
            "\t\t\tresult.push(value);",
            "\t\t}",
            "\t});",
            "\treturn result;",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n",
        "body": [
            "\treturn string.length;",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n",
        "body": [
            "    //declare var to hold current largest divisor",
            "    let ld = 0;",
            "    //loop through all numbers 1 to n-1",
            "    for(i=1; i<n; i++){",
            "        //if the number is divisible by n evenly, check to see if it is larger than ld",
            "        if(n%i===0){",
            "            //if it is larger, set ld to that value",
            "            if(i>ld){",
            "                ld = i;",
            "            }",
            "        }",
            "    }",
            "    //return the largest divisor ",
            "    return ld;",
            "}"
        ]
    },
    {
        "language": "js",
        "prompt": "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n",
        "body": [
            "    let factor = 2;",
            "    let arr = [];",
            "    while (n > 1) {",
            "        if (n % factor == 0) {",
            "            arr.push(factor);",
            "            n = n / factor;",
            "        } else {",
            "            factor++;",
            "        }",
            "    }",
            "    return arr;",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n",
        "body": [
            "    let result = [];",
            "    numbers.forEach(function(value){",
            "        if(numbers.indexOf(value) === numbers.lastIndexOf(value)){",
            "            result.push(value);",
            "        }",
            "    });",
            "    return result;",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n",
        "body": [
            "\tvar result = \"\";",
            "\tfor(var i = 0; i < string.length; i++){",
            "\t\tif(string[i] == string[i].toUpperCase()){",
            "\t\t\tresult += string[i].toLowerCase();",
            "\t\t}else{",
            "\t\t\tresult += string[i].toUpperCase();",
            "\t\t}",
            "\t}",
            "\treturn result;",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n",
        "body": [
            "\tif(strings.length === 0){",
            "\t\treturn \"\";",
            "\t}",
            "\tvar string = strings.join(\"\");",
            "\treturn string;",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n",
        "body": [
            "    return strings.filter( function(str){",
            "        return str.startsWith(prefix);",
            "    });",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n",
        "body": [
            "\treturn number - Math.floor(number);",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n",
        "body": [
            "  return l.filter(e=>e>0);",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n",
        "body": [
            "    if (n==1) {",
            "        return false;",
            "    }",
            "",
            "    if (n==2) {",
            "        return true;",
            "    }",
            "",
            "    if (n%2==0) {",
            "        return false;",
            "    }",
            "",
            "    var limit = Math.sqrt(n);",
            "    for (var i = 3; i <= limit; i += 2) {",
            "        if (n%i==0) {",
            "            return false;",
            "        }",
            "    }",
            "",
            "    return true;",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n",
        "body": [
            "    let x=[];",
            "    let y=[];",
            "    let k=0;",
            "    for(let i=0;i<l.length;i++){",
            "        if(i%3==0){",
            "            y[k]=l[i];",
            "            k=k+1;",
            "        }",
            "        else{",
            "            x[i]=l[i];",
            "        }",
            "    }",
            "    y.sort();",
            "    k=0;",
            "    for(let i=0;i<l.length;i++){",
            "        if(i%3==0){",
            "            x[i]=y[k];",
            "            k=k+1;",
            "        }",
            "    }",
            "    return x;",
            "}"
        ]
    },
    {
        "language": "js",
        "prompt": "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n",
        "body": [
            "\treturn l.filter(function(e, i, a){",
            "\t\treturn a.indexOf(e) === i;",
            "\t}).sort(function(a, b){return a-b});",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n",
        "body": [
            "    return Math.max.apply(null, l);",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n",
        "body": [
            "    let result = 0;",
            "    for(let i = 0; i < n; i++){",
            "        if(i % 11 === 0 || i % 13 === 0){",
            "            let arr = i.toString().split('');",
            "            for(let j = 0; j < arr.length; j++){",
            "                if(arr[j] === '7'){",
            "                    result++;",
            "                }",
            "            }",
            "        }",
            "    }",
            "    return result;",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n",
        "body": [
            "    //get the even indicies",
            "    var l2 = []",
            "    for(var i = 0; i < l.length; i += 2){",
            "        l2.push(l[i])",
            "    }",
            "    // sort the even indicies",
            "    l2.sort(function(a, b){return a - b})",
            "    // replace the even indicies",
            "    for(var i = 0; i < l2.length; i++){",
            "        l[i * 2] = l2[i]",
            "    }",
            "    return l",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n",
        "body": [
            "    function isPrime(number){",
            "        if(number <= 3){",
            "            return number > 1;",
            "        }",
            "        else if(number % 2 == 0 || number % 3 == 0){",
            "            return false;",
            "        }",
            "        else{",
            "            for(var i = 5; i * i <= number; i += 6){",
            "                if(number % i == 0 || number % (i + 2) == 0){",
            "                    return false;",
            "                }",
            "            }",
            "            return true;",
            "        }",
            "    }",
            "    function fib(num){",
            "        var a = 1, b = 0, temp;",
            "    ",
            "        while (num >= 0){",
            "            temp = a;",
            "            a = a + b;",
            "            b = temp;",
            "            num--;",
            "        }",
            "    ",
            "        return b;",
            "    }",
            "    var res = 0;",
            "    var fibNum = 0;",
            "    while(res < n){",
            "        if(isPrime(fib(fibNum))){",
            "            res++;",
            "        }",
            "        fibNum++;",
            "    }",
            "    return fib(fibNum - 1);",
            "}"
        ]
    },
    {
        "language": "js",
        "prompt": "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n",
        "body": [
            "  var sum = 0;",
            "  for (var i = 0; i < operations.length; i++) {",
            "    sum += operations[i];",
            "    if (sum < 0) {",
            "      return true;",
            "    }",
            "  }",
            "  return false;",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n",
        "body": [
            "  for (var i = 0; i < l.length; i++) {",
            "    for (var j = 0; j < l.length; j++) {",
            "      for (var k = 0; k < l.length; k++) {",
            "        if (i !== j && i !== k && j !== k) {",
            "          if (l[i] + l[j] + l[k] === 0) {",
            "            return true;",
            "          }",
            "        }",
            "      }",
            "    }",
            "  }",
            "  return false;",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n",
        "body": [
            "  let num_collisions = 0;",
            "  let left_to_right = Array(n).fill(1);",
            "  let right_to_left = Array(n).fill(1);",
            "  for (let i = 0; i < left_to_right.length; i++) {",
            "    for (let j = 0; j < right_to_left.length; j++) {",
            "      if (left_to_right[i] == right_to_left[j]) {",
            "        num_collisions++;",
            "      }",
            "    }",
            "  }",
            "  return num_collisions;",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n",
        "body": [
            "\tvar new_list = [];",
            "\tfor(var i = 0; i < l.length; i++){",
            "\t\tnew_list.push(l[i] + 1);",
            "\t}",
            "\treturn new_list;",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n",
        "body": [
            "    var i = 0",
            "    while (i < l.length){",
            "        var j = i+1",
            "        while (j < l.length){",
            "            if ((l[i] + l[j]) === 0){",
            "                return true",
            "            }",
            "            j = j + 1",
            "        }",
            "        i = i + 1",
            "    }",
            "    return false",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n",
        "body": [
            "    let r = x % base;",
            "    let q = Math.floor(x / base);",
            "    if (q === 0) return r.toString();",
            "    return change_base(q, base) + r.toString();",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n",
        "body": [
            "   return a*h/2;",
            "};",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n",
        "body": [
            "  var prev = [0,0,2,0];",
            "  if(n<prev.length){",
            "    return prev[n];",
            "  }",
            "  for(var i=4;i<=n;i++){",
            "    var curr = prev[0]+prev[1]+prev[2]+prev[3];",
            "    prev[0] = prev[1];",
            "    prev[1] = prev[2];",
            "    prev[2] = prev[3];",
            "    prev[3] = curr;",
            "  }",
            "  return prev[3];",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n",
        "body": [
            "    let middle = Math.floor(l.length / 2);",
            "    let sorted = l.sort((a, b) => a - b);",
            "    if (l.length % 2 === 0) {",
            "        return (sorted[middle - 1] + sorted[middle]) / 2;",
            "    } else {",
            "        return sorted[middle];",
            "    }",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n",
        "body": [
            "    return text == text.split(\"\").reverse().join(\"\");",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n",
        "body": [
            "\tvar result = 1;",
            "\twhile(n>0){",
            "\t\tresult = (result*2)%p;",
            "\t\tn--;",
            "\t}",
            "\treturn result;",
            "}",
            "",
            "",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n",
        "body": [
            "  var sum = 0;",
            "  for(var i = 0; i < numbers.length; i++){",
            "    sum += numbers[i];",
            "  }",
            "  var mean = sum / numbers.length;",
            "  var sum_abs_diff = 0;",
            "  for(var i = 0; i < numbers.length; i++){",
            "    sum_abs_diff += Math.abs(numbers[i] - mean);",
            "  }",
            "  return sum_abs_diff / numbers.length;",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n",
        "body": [
            "    return l.every(x => x < t);",
            "}"
        ]
    },
    {
        "language": "js",
        "prompt": "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n",
        "body": [
            "    return x + y;",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n",
        "body": [
            "    let res = true;",
            "    for(let i = 0; i < s0.length; i++){",
            "        if(s1.indexOf(s0[i]) === -1){",
            "            res = false;",
            "            break;",
            "        }",
            "    }",
            "    for(let i = 0; i < s1.length; i++){",
            "        if(s0.indexOf(s1[i]) === -1){",
            "            res = false;",
            "            break;",
            "        }",
            "    }",
            "    return res;",
            "}",
            "",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n",
        "body": [
            "    if(n <= 2){",
            "        return 1;",
            "    } else {",
            "        return fib(n-1) + fib(n-2);",
            "    }",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n",
        "body": [
            "\tvar opens = 0;",
            "\tfor (var i = 0; i < brackets.length; i++) {",
            "\t\tif (brackets[i] === \"<\") {",
            "\t\t\topens++;",
            "\t\t}",
            "\t\telse if (brackets[i] === \">\") {",
            "\t\t\topens--;",
            "\t\t}",
            "\t\tif (opens < 0) {",
            "\t\t\treturn false;",
            "\t\t}",
            "\t}",
            "\treturn opens === 0;",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n",
        "body": [
            "    if(l.length <= 1){",
            "        return true;",
            "    }",
            "    if(l[0] < l[1]){",
            "        for(var i = 1; i < l.length - 1; i++){",
            "            if(l[i] > l[i + 1]){",
            "                return false;",
            "            }",
            "        }",
            "    }",
            "    else{",
            "        for(var i = 1; i < l.length - 1; i++){",
            "            if(l[i] < l[i + 1]){",
            "                return false;",
            "            }",
            "        }",
            "    }",
            "    return true;",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n",
        "body": [
            "    return [...new Set(l1.filter(n=>l2.includes(n)))].sort();",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n",
        "body": [
            "\tvar result = 2;",
            "\twhile(n > result){",
            "\t\tif(n % result == 0){",
            "\t\t\tn = n / result;",
            "\t\t}",
            "\t\telse{",
            "\t\t\tresult = result + 1;",
            "\t\t}",
            "\t}",
            "\treturn result;",
            "}"
        ]
    },
    {
        "language": "js",
        "prompt": "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n",
        "body": [
            "  var result = [];",
            "  for(var i = 0; i < numbers.length; i++){",
            "    result.push(numbers[i]);",
            "    if(i !== numbers.length - 1){",
            "      result.push(delimeter);",
            "    }",
            "  }",
            "  return result;",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n",
        "body": [
            "\tvar sum = 0;",
            "\tfor(var i = 1; i <= n; i++){",
            "\t\tsum += i;",
            "\t}",
            "\treturn sum;",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n",
        "body": [
            "    var opens = [];",
            "    for (var i = 0; i < brackets.length; i++){",
            "        if (brackets[i] == \"(\"){",
            "            opens.push(brackets[i]);",
            "        }",
            "        else if (brackets[i] == \")\"){",
            "            if (opens.length > 0){",
            "                opens.pop();",
            "            }",
            "            else {",
            "                return false;",
            "            }",
            "        }",
            "    }",
            "    if (opens.length == 0){",
            "        return true;",
            "    }",
            "    else {",
            "        return false;",
            "    }",
            "}"
        ]
    },
    {
        "language": "js",
        "prompt": "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n",
        "body": [
            "    let coeff = [];",
            "    for(let i = 1; i < xs.length; i++){",
            "        coeff.push(xs[i] * i);",
            "    }",
            "    return coeff;",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n",
        "body": [
            "  if(n <= 0){",
            "    return 0;",
            "  }",
            "  if(n == 1){",
            "    return 0;",
            "  }",
            "  if(n == 2){",
            "    return 1;",
            "  }",
            "  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);",
            "}",
            "",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n",
        "body": [
            "\ts=s.toLowerCase();",
            "\tvar vowels = ['a','e','i','o','u'];",
            "\tvar count = 0;",
            "\t//loop through string",
            "\tfor(var i=0; i<s.length; i++){",
            "\t\t//check if the current letter is a vowel",
            "\t\tif(vowels.indexOf(s[i])!=-1){",
            "\t\t\tcount++;",
            "\t\t}",
            "\t}",
            "\t//check if the last letter is 'y'",
            "\tif(s[s.length-1]=='y'){",
            "\t\tcount++;",
            "\t}",
            "\treturn count;",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n",
        "body": [
            "\tvar str = x.toString();",
            "\tvar len = str.length;",
            "\tvar res = '';",
            "\tif(len < shift){",
            "\t\tfor(var i = len-1; i >= 0; i--){",
            "\t\t\tres += str[i];",
            "\t\t}",
            "\t}else{",
            "\t\tres = str.substring(len-shift) + str.substring(0, len-shift);",
            "\t}",
            "\treturn res;",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n",
        "body": [
            "   var sum = 0;",
            "    for(var i = 0; i < s.length; i++){",
            "        if(s[i] >= 'A' && s[i] <= 'Z'){",
            "            sum += s.charCodeAt(i);",
            "        }",
            "    }",
            "    return sum;",
            "}"
        ]
    },
    {
        "language": "js",
        "prompt": "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n",
        "body": [
            "    let split_s = s.split(\" \");",
            "    let num_of_apples = parseInt(split_s[0]);",
            "    let num_of_oranges = parseInt(split_s[3]);",
            "    let sum = num_of_apples + num_of_oranges;",
            "    return n - sum;",
            "}"
        ]
    },
    {
        "language": "js",
        "prompt": "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n",
        "body": [
            "    let result = [],",
            "        index = -1;",
            "    for(let i = 0; i < arr.length; i++){",
            "        if(arr[i] % 2 === 0){",
            "            if(result.length === 0 || result[0] > arr[i]){",
            "                result = [arr[i], i];",
            "            }",
            "        }",
            "    }",
            "    return result;",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n",
        "body": [
            "  var h = {};",
            "  for (var i=0; i<lst.length; i++){",
            "    var x = lst[i];",
            "    if (x in h){",
            "      h[x] += 1;",
            "    }",
            "    else{",
            "      h[x] = 1;",
            "    }",
            "  }",
            "  var keys = Object.keys(h);",
            "  var max = 0;",
            "  for (var i=0; i<keys.length; i++){",
            "    if (keys[i] > max && h[keys[i]] >= keys[i]){",
            "      max = keys[i];",
            "    }",
            "  }",
            "  if (max == 0){",
            "    return -1;",
            "  }",
            "  return max;",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n",
        "body": [
            "    var level = 0;",
            "    var maxlevel = 0;",
            "    var result = [];",
            "    for (var i = 0; i < paren_string.length; i++){",
            "        if (paren_string[i] == \"(\"){",
            "            level += 1;",
            "            if (level > maxlevel){",
            "                maxlevel = level;",
            "            }",
            "        }",
            "        else if (paren_string[i] == \")\"){",
            "            level -= 1;",
            "        }",
            "        else if (paren_string[i] == \" \"){",
            "            result.push(maxlevel);",
            "            maxlevel = 0;",
            "            level = 0;",
            "        }",
            "    }",
            "    result.push(maxlevel);",
            "    return result;",
            "}",
            "",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n",
        "body": [
            "    if(lst.length === 0){",
            "        return [];",
            "    }",
            "    var output = [];",
            "    var tmp = lst.slice();",
            "    for(var i = 0; i < lst.length; i++){",
            "        if(i % 2 === 0){",
            "            output.push(Math.min.apply(null, tmp));",
            "        }",
            "        else{",
            "            output.push(Math.max.apply(null, tmp));",
            "        }",
            "        tmp.splice(tmp.indexOf(output[i]), 1);",
            "    }",
            "    return output;",
            "}"
        ]
    },
    {
        "language": "js",
        "prompt": "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n",
        "body": [
            "    if(a+b>c && a+c>b && b+c>a){",
            "        var s = (a+b+c)/2;",
            "        return Math.sqrt(s*(s-a)*(s-b)*(s-c)).toFixed(2);",
            "    }else{",
            "        return -1;",
            "    }",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n",
        "body": [
            "    // Starting variables",
            "    let sum = 0;",
            "    let balanced = true;",
            "    // Sum all the numbers together to check if it's less than w",
            "    for(let i = 0; i < q.length; i++){",
            "        sum += q[i];",
            "    }",
            "    // Check if the array is balanced, stop the loop if it's not",
            "    for(let i = 0; i < q.length; i++){",
            "        if(q[i] !== q[q.length - 1 - i]){",
            "            balanced = false;",
            "            break;",
            "        }",
            "    }",
            "    // Return the boolean values if it's balanced and the sum is less than w.",
            "    return balanced && sum <= w;",
            "}"
        ]
    },
    {
        "language": "js",
        "prompt": "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n",
        "body": [
            "    let changes = 0;",
            "    for(let i = 0; i < arr.length/2; i++){",
            "        if(arr[i] != arr[arr.length - 1 - i]){",
            "            changes++;",
            "        }",
            "    }",
            "    return changes;",
            "}"
        ]
    },
    {
        "language": "js",
        "prompt": "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n",
        "body": [
            "    let sum_lst1 = 0;",
            "    let sum_lst2 = 0;",
            "    for(let item of lst1){",
            "        sum_lst1 += item.length;",
            "    }",
            "    for(let item of lst2){",
            "        sum_lst2 += item.length;",
            "    }",
            "    if(sum_lst1 > sum_lst2){",
            "        return lst2;",
            "    }",
            "    else{",
            "        return lst1;",
            "    }",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n",
        "body": [
            "    a = Math.abs(a);",
            "    const prime = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];",
            "    let i = 0;",
            "    let check = [];",
            "    while(a != 1){",
            "        if(a % prime[i] == 0){",
            "            a = a / prime[i];",
            "            check.push(prime[i]);",
            "        }else{",
            "            i++;",
            "        }",
            "    }",
            "    if(check.length == 3){",
            "        return true;",
            "    }else{",
            "        return false;",
            "    }",
            "}"
        ]
    },
    {
        "language": "js",
        "prompt": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n",
        "body": [
            "  if(x===1){",
            "    return true;",
            "  }",
            "  if(x < n){",
            "    return false;",
            "  }",
            "  if(x % n !== 0){",
            "    return false;",
            "  }",
            "  return is_simple_power(x/n, n);",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n",
        "body": [
            "\tif(Math.cbrt(a)%1==0){",
            "\t\treturn true;",
            "\t}else{",
            "\t\treturn false;",
            "\t}",
            "}"
        ]
    },
    {
        "language": "js",
        "prompt": "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n",
        "body": [
            "    let result = 0;",
            "    let hexadecimals = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'];",
            "    let primes = ['2', '3', '5', '7', 'B', 'D'];",
            "    for(let x = 0; x < num.length; x++){",
            "        if(primes.includes(num[x])){",
            "            result += 1;",
            "        }",
            "    }",
            "    return result;",
            "}"
        ]
    },
    {
        "language": "js",
        "prompt": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n",
        "body": [
            "    return `db${decimal.toString(2)}db`;",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n",
        "body": [
            "    var filtered = [];",
            "    for(var i = 0; i < strings.length; i++){",
            "        if(strings[i].includes(substring)){",
            "            filtered.push(strings[i]);",
            "        }",
            "    }",
            "    return filtered;",
            "}"
        ]
    },
    {
        "language": "js",
        "prompt": "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n// false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction is_happy(s){\n",
        "body": [
            "    let happy = true;",
            "    if(s.length<3){",
            "        happy = false;",
            "    }",
            "    for(let i=2; i<s.length; i++){",
            "        if(s[i]===s[i-1] || s[i]===s[i-2]){",
            "            happy = false;",
            "        }",
            "    }",
            "    return happy;",
            "}"
        ]
    },
    {
        "language": "js",
        "prompt": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n",
        "body": [
            "    var grades_array = [];",
            "    for (var i = 0; i < grades.length; i++){",
            "        if (grades[i] >= 4.0){",
            "            grades_array.push(\"A+\");",
            "        }",
            "        else if (grades[i] > 3.7){",
            "            grades_array.push(\"A\");",
            "        }",
            "        else if (grades[i] > 3.3){",
            "            grades_array.push(\"A-\");",
            "        }",
            "        else if (grades[i] > 3.0){",
            "            grades_array.push(\"B+\");",
            "        }",
            "        else if (grades[i] > 2.7){",
            "            grades_array.push(\"B\");",
            "        }",
            "        else if (grades[i] > 2.3){",
            "            grades_array.push(\"B-\");",
            "        }",
            "        else if (grades[i] > 2.0){",
            "            grades_array.push(\"C+\");",
            "        }",
            "        else if (grades[i] > 1.7){",
            "            grades_array.push(\"C\");",
            "        }",
            "        else if (grades[i] > 1.3){",
            "            grades_array.push(\"C-\");",
            "        }",
            "        else if (grades[i] > 1.0){",
            "            grades_array.push(\"D+\");",
            "        }",
            "        else if (grades[i] > 0.7){",
            "            grades_array.push(\"D\");",
            "        }",
            "        else if (grades[i] > 0.0){",
            "            grades_array.push(\"D-\");",
            "        }",
            "        else if (grades[i] == 0.0){",
            "            grades_array.push(\"E\");",
            "        }",
            "    }",
            "    return grades_array;",
            "}"
        ]
    },
    {
        "language": "js",
        "prompt": "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n",
        "body": [
            "    let length = string.length;",
            "    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199];",
            "    if (primes.includes(length)){",
            "        return true;",
            "    } else {",
            "        return false;",
            "    }",
            "}"
        ]
    },
    {
        "language": "js",
        "prompt": "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n",
        "body": [
            "    let ones = [];",
            "    for(let i = Math.pow(10, n-1); i < Math.pow(10, n); i++){",
            "        if(i.toString().startsWith('1') || i.toString().endsWith('1')){",
            "            ones.push(i);",
            "        }",
            "    }",
            "    return ones.length;",
            "}"
        ]
    },
    {
        "language": "js",
        "prompt": "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n",
        "body": [
            "    let newN = N.toString();",
            "    let total = 0;",
            "    for(let i = 0; i < newN.length; i++){",
            "        let digit = newN[i];",
            "        total += parseInt(digit);",
            "    }",
            "    return total.toString(2);",
            "}"
        ]
    },
    {
        "language": "js",
        "prompt": "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n",
        "body": [
            "    var add = 0;",
            "    for(var i = 0; i < lst.length; i++) {",
            "        if(lst[i] % 2 == 0 && i % 2 != 0) {",
            "            add += lst[i];",
            "        }",
            "    }",
            "    return add;",
            "}"
        ]
    },
    {
        "language": "js",
        "prompt": "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n",
        "body": [
            "    var result = [];",
            "    var strings = s.split(\" \");",
            "    strings.forEach(function(str){",
            "        var temp = str.split(\"\");",
            "        temp.sort();",
            "        result.push(temp.join(\"\"));",
            "    });",
            "    return result.join(\" \");",
            "}"
        ]
    },
    {
        "language": "js",
        "prompt": "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n",
        "body": [
            "    let coordinates = [];",
            "    for (let i = 0; i < lst.length; i++){",
            "        let array = lst[i];",
            "        for (let j = 0; j < array.length; j++){",
            "            if (lst[i][j] === x){",
            "                coordinates.push([i, j]);",
            "            }",
            "        }",
            "    }",
            "    return coordinates.sort(function(a, b){",
            "        return a[0] - b[0] || b[1] - a[1];",
            "    });",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n",
        "body": [
            "    let sum = array[0] + array[array.length - 1];",
            "    let newArr = [];",
            "    if(sum % 2 === 0){",
            "        newArr = array.sort(function(a, b){return b - a;});",
            "    }else{",
            "        newArr = array.sort(function(a, b){return a - b;});",
            "    }",
            "    return newArr;",
            "}"
        ]
    },
    {
        "language": "js",
        "prompt": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n",
        "body": [
            "\tvar alphabet = \"abcdefghijklmnopqrstuvwxyz\";",
            "\tvar newString = \"\";",
            "\tvar shiftBy = 2 * 2;",
            "\tfor(var i = 0; i < s.length; i++){",
            "\t\tvar index = alphabet.indexOf(s[i]);",
            "\t\tnewString += alphabet[(index + shiftBy) % 26];",
            "\t}",
            "\treturn newString;",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n",
        "body": [
            "    if(numbers.length == 0){",
            "        return [0, 1];",
            "    }",
            "    let sum = 0;",
            "    let product = 1;",
            "    for(let i = 0; i < numbers.length; i++){",
            "        sum += numbers[i];",
            "        product *= numbers[i];",
            "    }",
            "    return [sum, product];",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n",
        "body": [
            "\tif(lst.length<=1){",
            "\t\treturn undefined;",
            "\t}",
            "\tvar smallest=Math.min(...lst);",
            "\tvar second_smallest=Number.MAX_VALUE;",
            "\tfor(var i in lst){",
            "\t\tif(lst[i]>smallest&&lst[i]<second_smallest){",
            "\t\t\tsecond_smallest=lst[i];",
            "\t\t}",
            "\t}",
            "\tif(second_smallest==Number.MAX_VALUE){",
            "\t\treturn undefined;",
            "\t}",
            "\treturn second_smallest;",
            "}"
        ]
    },
    {
        "language": "js",
        "prompt": "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n",
        "body": [
            "    let lines = S.split(/[.?!]/);",
            "    let boredoms = 0;",
            "    for (let line of lines){",
            "        if(line.match(/^\\s*I /)){",
            "            boredoms++;",
            "        }",
            "    }",
            "    return boredoms;",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n",
        "body": [
            "    const vowels = \"aeiou\";",
            "    let result = \"\";",
            "    for(let i = 0; i < message.length; i++){",
            "        let letter = message[i];",
            "        if(vowels.includes(letter.toLowerCase())){",
            "            //Increment the letter by two (going back to 'a' or 'A' if we need to)",
            "            let newIndex = (letter.charCodeAt(0) + 2 - (letter.toLowerCase() === letter ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0))) % 26;",
            "            letter = String.fromCharCode(newIndex + (letter.toLowerCase() === letter ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0)));",
            "        }",
            "        result += letter.toUpperCase() === letter ? letter.toLowerCase() : letter.toUpperCase();",
            "    }",
            "    return result;",
            "}"
        ]
    },
    {
        "language": "js",
        "prompt": "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n",
        "body": [
            "    function prime(n){",
            "        if (n<2) return false;",
            "        for (let i=2; i<=Math.sqrt(n); i++){",
            "            if (n%i==0) return false;",
            "        }",
            "        return true;",
            "    }",
            "    let max = Math.max(...lst.filter(x=>prime(x)));",
            "    let digits = String(max).split('');",
            "    let sum = 0;",
            "    for (let i=0; i<digits.length; i++){",
            "        sum += Number(digits[i]);",
            "    }",
            "    return sum;",
            "}"
        ]
    },
    {
        "language": "js",
        "prompt": "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n",
        "body": [
            "    if (Object.keys(dict).length == 0){",
            "        return false;",
            "    }",
            "    var case_type = -1;",
            "    for (let key in dict){",
            "        if (typeof key == \"string\"){",
            "            if (case_type == -1){",
            "                if (key == key.toUpperCase()){",
            "                    case_type = 1;",
            "                }",
            "                else if (key == key.toLowerCase()){",
            "                    case_type = 0;",
            "                }",
            "                else{",
            "                    return false;",
            "                }",
            "            }",
            "            else if (case_type == 1){",
            "                if (key != key.toUpperCase()){",
            "                    return false;",
            "                }",
            "            }",
            "            else if (case_type == 0){",
            "                if (key != key.toLowerCase()){",
            "                    return false;",
            "                }",
            "            }",
            "        }",
            "        else{",
            "            return false;",
            "        }",
            "    }",
            "    return true;",
            "}"
        ]
    },
    {
        "language": "js",
        "prompt": "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n",
        "body": [
            "  if (n < 2) return [];",
            "  var output = [2];",
            "  for (var i = 3; i < n; i += 2){",
            "    var prime = true;",
            "    for (var j = 3; j < i; j += 2){",
            "      if (i % j === 0){",
            "        prime = false;",
            "        break;",
            "      }",
            "    }",
            "    if (prime) output.push(i);",
            "  }",
            "  return output;",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n",
        "body": [
            "    let aStr = a.toString()",
            "    let bStr = b.toString()",
            "    return parseInt(aStr[aStr.length - 1]) * parseInt(bStr[bStr.length - 1])",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n",
        "body": [
            "    var index;",
            "    var result = 0;",
            "    var vowel = ['A', 'E', 'I', 'O', 'U'];",
            "    for (index = 0; index < s.length; index += 2){",
            "        if (vowel.indexOf(s[index]) > -1){",
            "            result += 1;",
            "        }",
            "    }",
            "    return result;",
            "}"
        ]
    },
    {
        "language": "js",
        "prompt": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n",
        "body": [
            "    value = parseFloat(value);",
            "    if(value > 0){",
            "        if(value - Math.floor(value) < 0.5){",
            "            return Math.floor(value);",
            "        }else{",
            "            return Math.ceil(value);",
            "        }",
            "    }else{",
            "        if(value - Math.floor(value) > -0.5){",
            "            return Math.floor(value);",
            "        }else{",
            "            return Math.ceil(value);",
            "        }",
            "    }",
            "}",
            ""
        ]
    },
    {
        "language": "js",
        "prompt": "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n",
        "body": [
            "    let max = [];",
            "    let tempMax = 0;",
            "    for(let i = 0; i < numbers.length; i++){",
            "        if(tempMax < numbers[i]){",
            "            tempMax = numbers[i];",
            "        }",
            "        max.push(tempMax);",
            "    }",
            "    return max;",
            "}",
            ""
        ]
    }
]